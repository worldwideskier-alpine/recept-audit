生成仕様書
版数: v3.7.2
P25-10-02 00:00:00 JST+0900
投入順: 生成仕様書 → 検査仕様書 → 環境仕様書 → 機能仕様書

# 0) 目的（MUST）
本書は、ユーザーが添付・指示する仕様書群（生成／検査／環境／機能）に対し、チャット入出力・生成プロセス・納品形態を“機械可読な規約”として統一する唯一の生成手順書である。
本版（v3.7.1）は v3.6.1 の AHR 方針と ERR-GUARD（行単位 try/catch + L2ログ）を継承しつつ、**ポリグロット（多言語）対応**を新設・強化する。具体的には **LANG-PROFILE レジストリ**と **POLYGLOT-AHR-CORE** を導入し、言語固有のLint/補正/ガードを**宣言駆動**で適用可能にする。/provider/login と /provider/setup の「公開導線と秘匿導線」の関係は従来どおりセキュリティ観点で明確化する。
環境依存の実値（ベースURL等）は引き続き「環境仕様書」を唯一の権威とし、本書ではパス表記のみを用いる。

## 0.1) ポリグロット方針（MUST／新設）
- 本書の規定は**言語非依存**を原則とし、言語固有のルールは **tools/lang_profile.json**（以下「LANG-PROFILE」）に**機械可読に宣言**する。
- 生成・検査・AHR は **LANG-PROFILE** を参照して自動的に適用/スキップを切替える（対象拡張子が存在しない言語は SKIP）。
- 既存記述に含まれる言語例（PHPの擬似コード等）は**例示**であり、**拘束力は LANG-PROFILE に委譲**する。

# 1) 投入順（Authoritative Order）
標準投入順は **生成 → 検査 → 環境 → 機能** とする（本ヘッダにも明記）。
- 以後の状態判定・NEXTガイダンス・自動生成着手はこの順序を基準に行う。

# 2) チャットI/Oハンドシェイク（D / S / R）
## 2.1 D（議論）
- 回答は簡潔に。**最後の行に「NEXT: 次に投入すべき仕様書名」**を必ず1行で出力。

## 2.2 S（仕様投入）
- **S-Gen（生成仕様書受領時）**
  - 受領・整合が成功した場合、応答は**2行のみ**：
    1) `MISS: <未投入の仕様書を半角カンマ区切りで列挙>`
    2) `NEXT: 検査仕様書`
  - 例）`MISS: 検査仕様書, 環境仕様書, 機能仕様書` / `NEXT: 検査仕様書`
  - ※**READYは出さない。**
- **S-Inspec（検査仕様書受領時）／S-Env（環境仕様書受領時）**
  - 受領・整合が成功した場合、まだ未投入が残る限り **`MISS:` + `NEXT:` の2行のみ**。
- **S-Func（機能仕様書受領時＝最後の仕様書）**
  - 受領・整合が成功した瞬間に、**自動でR（生成/AHR）へ遷移し即時着手**する。
  - 生成完了時のチャット出力は **1行のみ**：`納品物: [Download ZIP](...)`
  - 仕様書類（.txt 納品要求時）は **`納品物: [Download TXT](...)`** を1行のみ出力。

## 2.3 R（生成・納品：**三段セルフヒール（AHR）**）
- **STEP表記は廃止**。進捗行や DONE 行は出さない。
- v3.4.0 に続き **Fail-Closed（NG時に即停止・ZIP禁止）** は**廃止**する。
- 本版は **Gate-0〜2** を維持しつつ、**NG検知→AHR（自動修復）→再検査**の**クローズドループ**で合格まで自動再試行する。
- AHR は**最小差分の自動修復**のみを対象とし、**仕様逸脱・実値欠落**（環境仕様書未定義など）は自動修復の対象外（その場合は D 体裁で不足項目を提示）。
- **ERR-GUARD 追補**：AHR は **ERR-GUARD の欠落**（try/catch 未設定・log_line 未呼出）を検出した場合、**build/working/** のスナップショットに対し**最小差分パッチ**を適用し、再検査を行う。

### 2.3.a POLYGLOT-AHR-CORE（MUST／新設）
AHR は LANG-PROFILE を参照し、以下の**言語非依存オペレーター**を適用する：
- **LITERAL-NORMALIZE**：`lang_profile.json.languages[*].literal_normalize[]` に列挙された正規表現置換を**最小差分**で適用（例：他言語系 8進リテラル `0o[0-7]+` を各言語の正規表現に正規化）。
- **SYM-IMPORT-GUARD**：`support_api` に登録された**プロジェクト標準API**の呼出しが未修飾/未インポートの場合、言語別の**import/using/完全修飾**を自動注入。
- **ERR-GUARD-MAP**：重要経路（/health 相当、DB接続/DDL相当など）に、各言語の構文による **try/catch（try/except 等）＋L2ログ**を**粒度小さく**挿入。
- **RUN-CHECKS-POLYGLOT**：AHR 後は **tools/run_checks.*** を再実行し、言語別リンタ（`lint_cmd`）での再検証を必須とする。

  **Gate-0: PACK-PROVENANCE-LOCK（MUST／継続＋汎用強化）**  
  - **FULL-ONLY-ACCEPTANCE（MUST）**: 受入対象は FULL のみ。差分／hotfix／手動ZIPは不可。 `COMPLIANCE.json.full_only_acceptance=true` を設定し、`tools/run_checks.*` は**差分納品痕跡**（欠落 `tools/` / `evidence/` / `MANIFEST.json` 不整合）を検出した場合は**非ゼロ終了**とする。

  - ZIP は **`tools/pack.*`** が実行し、同スクリプトが **`tools/run_checks.*` を先行実行**してからのみ生成可。  
  - `evidence/pkg/BUILD_LOG.txt` に `PACK_BY=<pack_script>` と実行時刻（UTC±）、および **`source="spec-only"`** を**必須記録**（テンプレ流用禁止）。  
  - **禁止**: `tools/` 以外から `evidence/**` や `COMPLIANCE.json` を生成・改変。  
  - `tools/run_checks.*` は Gate-1/2 の自己検証に成功した場合のみ、
    `evidence/pkg/ZIP_READY_OK.txt` を生成し、`COMPLIANCE.json` に  
    `.build_gate_zip_ready=true` / `.pack_provenance_ok=true` / `.zip_ready_ok=true` / **`.polyglot_lint_ok=true`** を**書き込む**。

  **Gate-1: run_checks + AHR 自動修復**  
  - `tools/run_checks.*` が失敗または必須証跡の欠落を検出した場合、**AHR を自動起動**する（詳細は #3）。
  - AHR が適用可能な NG の例：  
    TOKENS-FIRST / EVIDENCE-FRESHNESS / ABS-HREF-BAN / HTML LS / TOOLS-PRESENCE / STORAGE-PRESEED /
    BNORM/EARLY-ENV の軽微不整合 / LINT-SIG 再生成 / **HTML-LS-INJECT（全プロジェクト）** / **REL-HREF-BNORM-AUTO** / **LITERAL-NORMALIZE（ポリグロット）** / **SYM-IMPORT-GUARD（ポリグロット）** /
    SOT スキーマ宣言の不足（schema／DDL宣言追加） / **ERR-GUARD 欠落**（try/catch 未設置／log_line 未呼出の補完）
  - **AHR の適用→再Lint/再検査**を **最大3ラウンド**繰り返す（`AHR_MAX_ROUNDS=3`）。いずれかのラウンドで PASS すれば Gate-1 合格。

  **Gate-2: エビデンス在庫/完全性（AHR 連動）**  
  - `evidence/**/_OK*.txt` の最小集合が揃う（static/runtime/db/pkg 各カテゴリ≥1）。
  - **`evidence/static/*` の mtime が全**ソースファイル**の最新 mtime 以上（±120s）**。不足時は AHR が**証跡の再生成**を実施。  
    （※ 従来の「`*.php` 基準」は **LANG-PROFILE** に基づく**対象拡張子集合**へ一般化）
  - `MANIFEST.json.files[]` に evidence/** が**全列挙**され、物理実体と**完全一致**（不一致時は AHR で MANIFEST を再構築）。

- **納品条件**：Gate-0/1/2 が **いずれかの AHR ラウンドで PASS** した時点で `tools/pack.*` が ZIP を生成し、チャットは **「納品物: [Download ZIP](...)」の1行のみ**を出力。
- **手動ZIP（pack.* 非経由）を禁止**。

# 3) AHR（Auto-Rollback/Auto-Regen）実行モデル（MUST）
- **ワークツリー分離**：AHR は `build/working/`（可搬サブツリー）に**一時スナップショット**を作成し、修復は**スナップショット側のみ**で行う。原本は保持。
- **ロールバック原則**：修復が不要または有害と判定された差分は**元に戻す**。AHR は**最小差分**を保証し、関係ないファイルを変更しない。
- **実装要件（tools/auto_regen.*）**：
  1. `evidence/gen/AUTO_REGEN_PLAN.json` を入力に、対象 NG を **ルールベース**で fix。  
  2. 代表フィクサ（`tools/fixers/*`）の最小要件（**言語非依存の中核＋例示**）：  
     - **POLYGLOT:LITERAL-NORMALIZE（新設）**：`lang_profile.json.languages[*].literal_normalize[]` を**順序通り**適用（最小差分）。  
     - **POLYGLOT:SYM-IMPORT-GUARD（新設）**：`support_api` に列挙された関数/シンボル呼出しに対し、**import/using/完全修飾**を**先頭〜80行内**に自動注入（既に満たす場合は無変更）。  
     - **HTML-LS-INJECT（MUST／全プロジェクト）**：テンプレート/静的HTML/SSR出力の雛形に対し、`<!doctype html>`（小文字）／`<meta charset="utf-8">`／`<html lang="ja">` を**最小差分**で注入。既に満たす場合は無変更。対象拡張子は LANG-PROFILE の `ext[]` に基づく（例：`.php`, `.html`, `.blade.php`, `.ejs`, `.tsx` 等）。
     - **REL-HREF-BNORM-AUTO（MUST／AHR自動変換）**：内部リンクの `<a href="/...">` 直書きを禁止し、**href()/to()** 等（LANG-PROFILE の `support_api.href_fn|to_fn`）経由に**機械変換**。http(s) 外部リンクは除外。変換不能な場合は相対パスに正規化し、後段の BNORM 検査に委譲。既に規約準拠の場合は無変更。
     - **ERR-GUARD 注入（維持）**：`try{...}catch(E){ log_line(...); }` を不足箇所へ**行単位**で挿入（/health 相当、DB接続/charset適用、DDL適用、固定行 upsert 等）。  
     - **TOOLS-PRESENCE/STORAGE-PRESEED**：`tools/*` の在庫/実行権限、`storage/.keep` を自動生成。  
     - **EVIDENCE-FRESHNESS/LINT-SIG**：言語別リンタ（`lint_cmd`）を再走し、ハッシュ群と署名を再生成（出力先は `evidence/static/`）。  
     - **BNORM/EARLY-ENV**：FC（フロントコントローラ）における **/env 早期直返し**と**サブディレクトリ BNORM**の静的パッチ。  
     - **SETUP-LINK-BAN／REDIR-BNORM**：公開画面の秘匿導線リンク除去と、リダイレクトの no-store／正規化。  
     - **CONFIG-PATH-ROOT-LOCK**：設定ファイルのルート固定読込へ機械修正し、MANIFEST へ強制列挙。
  3. 修復後に **`tools/run_checks.*` を再実行**し、ラウンド結果を `evidence/gen/AHR_ROUND_*.json` に記録。
  4. 最終的に **全 Gate PASS** で `AHR_RESULT=pass`、未達なら `AHR_RESULT=defer` とし、どの NG が**自動修復対象外**だったかを `AUTO_REGEN_REPORT.json` に列挙。
- **ソースロック**：証跡（Lintログ/ハッシュ/署名 等）は**AHR から直接生成せず**、**必ず `tools/run_checks.*` を介して作成**（EVIDENCE-SOURCE-LOCK 維持）。
- **最大試行**：`AHR_MAX_ROUNDS=3`。3回で未達の場合は **D 体裁で不足項目を提示**し、ユーザーの指示を待つ（納品は保留）。

# 4) 入力（Input Contracts）
- 4仕様書の**最新版のみ**を唯一の参照元とする（旧版・他スレ参照禁止）。
- 競合時の優先順位: **仕様書 ＞ 既存生成物**。整合しない場合は仕様書で上書き。
- 環境依存の実値はすべて「環境仕様書」を参照し、本書・検査・機能からは重複削除。

# 5) 生成タスク（標準）

## 直返しエンドポイント（/env-lite, /health-lite）— MUST
- **位置と名称**  
  - リポジトリ直下に **実体ファイル**を同梱。例：`env-lite.*`、`health-lite.*`（拡張子は言語/実装方式に依存）。
  - **URL パス固定**：`/env-lite`、`/health-lite`。`.htaccess` 等で **`-f/-d` 優先の素通し**を設定し、フロントコントローラ（FC）を経由しない。
- **レスポンス仕様**  
  - 200 / `Content-Type: application/json; charset=utf-8`。
  - **最小内容**：`{"ok":true,"kind":"env-lite"}`、`{"ok":true,"kind":"health-lite"}`（追加フィールド任意）。
  - **ヘッダ**：プロジェクト既定の **`Cache-Control: no-store`** は **.htaccess 等の全体付与**で満たす（FC特有ヘッダは付けない＝*直返し*）。
- **目的／使い分け**  
  - /env-lite：監視・L7ヘルスチェッカ向けの **“静的疎通”**（アプリ初期化を伴わない）。
  - /health-lite：CDN/ロードバランサ向けの **“軽量可用性”**（DB到達やスキーマ初期化は行わない）。
  - /health（別物）：**最小ブート**（スキーマ自己確保）を実行。*データ投入は禁止*（機能仕様書準拠）。
- **納品・検査連携**  
  - `MANIFEST.json.files[]` に **`env-lite.*` / `health-lite.*`** を列挙（必須）。
  - `curl_smoke.sh` に **HEAD/GET の到達性テスト**を実装（200 + `no-store` を確認）。
  - `tools/run_checks.*` は `evidence/runtime/ENV_LITE_OK.txt` を出力可能とする（検査仕様書の対応項目と連携）。

## /health（最小ブート + HEAD 強化 + ERR-GUARD）— MUST
- **役割**：**最小ブート**（スキーマ自己確保のみ）を行い、**データ投入はしない**（機能仕様書準拠）。
- **HEAD 対応（強化）**
  - **/health への HEAD** は **GET と同等の最小ブート処理**（ERR-GUARD 付き）を実行した上で、**本文は出力せず**に **`200`** を返し、ヘッダに **`Cache-Control: no-store`** と **`Content-Type: application/json`** を**必ず**付与する。
  - **致命的エラーをヘッダ直後で発生させない**こと（検査仕様書の HEAD-LOCK 項目に整合）。
  - （注）本節に現れるコード断片は**言語例（擬似）**であり、**拘束力は LANG-PROFILE** に委譲する。

- **ERR-GUARD 詳細**：スキーマ適用ロジック（Schema::ensure 相当）は **各DDL/各固定行 upsert/各索引確保**を**行ごと**に try/catch し、**成功/失敗を L2 へ 1行JSON**で出力（`schema_table_created|failed`, `schema_index_created|exists|failed`, `fixed_row_upsert_ok|failed` 等）。**失敗しても後続DDLを極力継続**。最終的な合否は /health 側の JSON で判定。

- **納品・検査連携**
  - `curl_smoke.sh` に **HEAD /health** の到達性検証（200 + no-store + application/json）を追加。
  - `tools/run_checks.*` は **`evidence/runtime/HEALTH_BOOT_HEAD_OK.txt`** を生成できること。        
  - `tools/run_checks.*` は **ERR-GUARD 静的検査**を実施し、`evidence/static/ERR_GUARD_OK.txt` を生成、`COMPLIANCE.json.err_guard_ok=true` を設定。

- **ENV 検査補助**：`storage/logs/app.log` に `health_min_boot_pass|fail` を**必ず**記録（環境仕様書の対応要件と整合）。

# 6) 生成ガード（A〜V；本版維持）＋ **W〜Z（ポリグロット追補／新設）**
（**ポリグロット注**）A〜V は**PHPプロファイルの例示規範**として維持する。他言語プロファイルでは **LANG-PROFILE** により**等価ルール**を適用し、該当しないものは SKIP とする。

A) Url::to / Url::href 一元化（直URL記述禁止）  
B) base_url 契約の遵守（/index.php を含めないクリーンURL用）  
C) PATH_INFO 優先のルーティング（QUERY_STRING依存禁止）  
D) .htaccess 最小固定（/assets のみ直配信、他はフロントコントローラへRewrite）  
E) /setup はGETで公開（初期ブート用—機微情報の露出禁止）  
F) スモーク強化（curl_smoke.sh に /health, /setup, /health-lite, /env-lite, 代表ルートの到達性テストを実装）  
G) **エビデンス在庫ロック** — evidence/static・runtime・db・pkg 各カテゴリに **OK 証跡 ≥1**。`MANIFEST.json.files[]` に evidence/** を**全列挙**。  
H) **Pages 相対 require の禁止（Support 直接参照禁止）** — FCで一元化。  
I) **BASE_DIR 基準のパス解決を必須** — ベースパスヘルパを提供し、相対 `../..` を禁止。  
**J) EARLY-ENV-BNORM-SUBDIR（MUST）** — FC における **/env** の早期直返しは BNORM 前提。  
**K) RUN-CHECKS-STRICT-BNORM（MUST）** — BNORM 失敗は即 AHR 起動。  
**L) TOKENS-FIRST（MUST）** — （PHPプロファイル例）`*.php` は**先頭 `<?php`**。他言語は **LANG-PROFILE** に準拠。  
**M) EVIDENCE-FRESHNESS（MUST）** — `evidence/static/*` の mtime は全**ソース**の最新 mtime 以上（±120s）。  
**N) REL-HREF-BNORM-LOCK（MUST）** — リンク生成は **href()/to()** 経由。直書き禁止。  
**O) PACK-PROVENANCE-LOCK（MUST）** — **`tools/pack.*` 内に `tools/run_checks.*` 呼出が存在**。  
**P) EVIDENCE-SOURCE-LOCK（MUST）** — 証跡生成元は**`tools/run_checks.*` のみ**。AHR は直接生成しない。  
**Q) SETUP-LINK-BAN（MUST）** — 公開画面で **/provider/setup** へのアンカーリンク禁止（文言のみ可）。  
**R) SETUP-ACCESS-POLICY（MUST）** — `/provider/setup` は秘匿URL。初回GETのみ公開、POST成功後は 302→login、以降は常に 302。  
**S) SETUP-ROBOTS-NOINDEX（SHOULD）** — `/provider/setup` 全応答に `X-Robots-Tag: noindex, nofollow, noarchive`。  
**T) HEALTH-HEAD-BOOT-LOCK（MUST）** — `/health` は **HEAD** に対しても最小ブートを実施し、**200 + no-store + application/json**。  
**U) CONFIG-PATH-ROOT-LOCK（MUST）** — 設定読み込みはルート固定。`MANIFEST.json.files[]` に `config.*` を列挙。  
**V) ERR-GUARD（MUST）** — 行単位 try/catch + L2ログ。重要経路で未捕捉例外を根絶。

**W) LANG-PROFILE-REGISTRY（MUST／新設）**  
- `tools/lang_profile.json` を**必須同梱**。各言語について `ext[]`（拡張子）、`lint_cmd[]`（公式リンタ/コンパイラ）、`literal_normalize[]`（from/to 正規表現）、`support_api`（シンボル名→正規参照形）を宣言。
- `MANIFEST.json.files[]` に `tools/lang_profile.json` を**必ず列挙**。`COMPLIANCE.json.lang_profile=true` を設定。

**X) POLYGLOT-LINT-ENFORCE（MUST／新設）**  
- `tools/run_checks.*` は LANG-PROFILE を読み、**存在する拡張子**に対して **各言語の公式リンタ/コンパイラ**（`lint_cmd`）を**全ファイル**へ実行。失敗は非ゼロ終了。  
- 代表証跡：`evidence/static/LINT_<lang>.log`、`evidence/static/LINT_SIG_<lang>.txt`（順序付きハッシュ署名）。`COMPLIANCE.json.polyglot_lint_ok=true`。

**Y) SUPPORT-API-IMPORT-GUARD（MUST／新設）**  
- `support_api` に登録された**標準API**（例：`no_store_headers` 等）の呼出しは、**正しい import/using/完全修飾**でなければならない。AHR は不足時に**先頭〜80行内**へ最小差分で補完。  
- 代表証跡：`evidence/static/SUPPORT_IMPORT_OK.txt`。`COMPLIANCE.json.support_import_ok=true`。

**Y2) HTML-LS-GLOBAL-LOCK（MUST／新設）**  
- すべての出力HTML/テンプレートが **HTML LS 基礎3点**を満たすことを**言語非依存でロック**する。 `tools/run_checks.*` は言語別テンプレート拡張子に対して検査を行い、`evidence/static/HTML_LS_BASE_OK.txt` を生成。 AHR は **HTML-LS-INJECT** を適用して不足箇所を最小差分で補正する。

**Z) POLYGLOT-SMOKE-HEAD（SHOULD／新設）**  
- `curl_smoke.sh` は **HEAD/GET** の疎通検証を代表URL群に対して行い、**200 + no-store** を確認（レスポンス種別は問わない）。  
- 代表証跡：`evidence/runtime/POLYGLOT_SMOKE_OK.txt`。

# 7) データ表現ポリシー（JSON Only）—（維持）
- app/Data/ は **JSON/JSONL限定**。CSV/YAML/言語配列等は禁止。
- 金額は**1円単位**で保持・提示（丸め禁止）。
- COMPLIANCE.json に `.data_repr_json_only: true` を**必須**。

# 8) UI/言語ポリシー（維持）
- 既定言語は日本語固定。静的文言は /app/Locale/ja.json で集中管理。
- 検査互換のため、H1「Provider Dashboard」を暫定許容（その他は日本語）。
- COMPLIANCE.json に `.ui_language: "ja"` と `.no_stub_pages: true` を**必須**。
- **HTML Living Standard 準拠（MUST）**：`<!doctype html>` / `<meta charset="utf-8">` / `<html lang="ja">` を**必須**。
- （全プロジェクト共通の**必須**要件。AHR は **HTML-LS-INJECT** により不足箇所を**自動補正**し、`tools/run_checks.*` が `evidence/static/HTML_LS_BASE_OK.txt` を生成し `COMPLIANCE.json.html_ls_ok=true` を設定する。）
- **公開導線の明記**：/provider/login では **/provider/setup へのリンクは出さない**（#6 Q に準拠）。文言のみ可。

# 9) 納品（最終出力）
## 9.1) 受入条件（MUST／新設）
- **FULLのみ**を受入対象とする。**差分（diff）／パッチ（patch）／hotfix単体**での納品は**禁止**。  
  - 本書における **FULL** とは、リポジトリの**実行に必要な一式**（`app/**`, `public/**`, `config/**`, `tools/**`, `evidence/**`, `storage/.keep` などの**必須在庫**、および `MANIFEST.json`・`COMPLIANCE.json` を含む）を**完全同梱**したアーカイブを指す。
- **手動ZIP**は**禁止**。ZIP 生成は **`tools/pack.*`** を唯一の経路とし、同スクリプト内で **`tools/run_checks.*` を先行実行**して **Gate-0/1/2** の合格を確認した場合にのみ ZIP 化を許可する（**PACK-PROVENANCE-LOCK** に従う）。
- 受入可否は `COMPLIANCE.json` の下記キーで機械判定する：  
  - `.full_only_acceptance=true`  
  - `.pack_provenance_ok=true` / `.zip_ready_ok=true` / `.polyglot_lint_ok=true` / `.html_ls_ok=true` / `.err_guard_ok=true`
- **部分納品・分割納品**は**不可**（`tools/` や `evidence/` 欠落を含む）。`tools/run_checks.*` は **TOOL/PRESENCE** と **EVIDENCE/STOCK** の両検査に**不合格**となるべきで、AHR による補完が適用された場合は再検査で PASS になるまで ZIP 化を禁止する。
- **名称規約**：`<project>_full_<semver>.zip` を標準とする（例：`recept_audit_full_3.7.2.zip`）。


- 原則 **ZIPのみ**。チャットでは **「納品物: [Download ZIP](...)」** の1行のみ提示。
- 仕様書類（.txt 納品要求時）は **「納品物: [Download TXT](...)」** の1行のみ提示。
- **MANIFEST ハッシュ整合**: `evidence/gen/GEN_PROVENANCE.json.outputs.artifact_manifest_sha256` と `sha256sum MANIFEST.json` を一致確認。
- **AHR により Gate-0/1/2 が PASS** した場合のみ ZIP 提示可。**pack.* 非経由ZIPの提示は禁止**。

# 10) 検査仕様書との連携（最低充足条件＋ERR-GUARD追補＋ポリグロット追補）
- 本版追補として **HEAD 応答ロック**（/health HEAD：200 + no-store + application/json）および **CONFIG ルート固定** に準拠する。
- **A-BOOST**：/provider/setup の **HEAD/GET 無副作用**・**POST 作成→302**・**3xx no-store（301禁止）**・**Class not found 0件** に整合。
- **G-PATH**：相対 require 包括禁止 / ベースパス解決 / Support 自己完結 / HTTPクライアント cURL 統一 に整合。
- **ERR-GUARD 追加**：`tools/run_checks.*` は `catch|except` と `log_line(` の**対応関係**を静的検査し、`evidence/static/ERR_GUARD_OK.txt` を生成。`COMPLIANCE.json.err_guard_ok=true`。
- **POLYGLOT 追加**：検査仕様書の **LITERAL-MISMATCH**／**SUPPORT-IMPORT-LOCK**／**POLYGLOT-LINT**／**SMOKE-HEAD** の各項目に整合し、対応する **COMPLIANCE キー**（`literal_normalize_ok` / `support_import_ok` / `polyglot_lint_ok` 等）を **run_checks** から設定。

# 11) パーサー互換のためのヘッダ規約（維持）
- 本ファイル内で **「版数:」「更新:」「投入順:」は先頭の一度のみ**出現させる。
- **旧版の全文収載は行わない**。必要な引用はコードブロック内に収め、ヘッダ書式は含めない。
- 補助識別子として **Doc-ID: generation_spec** を先頭ブロックに含める。

# 12) エラー時の動作（AHR + ERR-GUARD）
- 仕様の欠落/競合を検知した場合は、**AHR を起動**しつつ、**ERR-GUARD により必ず L2ログを残す**（環境実値の未定義などは D 体裁で不足項目を提示）。
- **Gate-0/1/2 いずれかの NG** でも、**即停止せず** AHR が **最大3ラウンド**まで自動修復と再検査を実施。AHR 不在箇所は `AUTO_REGEN_REPORT.json` に列挙。
- **PACK-PROVENANCE-LOCK**、**EVIDENCE-SOURCE-LOCK** は従前どおり厳守（自動修復は**コード**と**宣言**に限定）。
