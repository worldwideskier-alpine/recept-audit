{
  "model": "gpt-5-codex",
  "max_output_tokens": 4096,
  "input": [
    {
      "role": "system",
      "content": [
        {
          "type": "input_text",
          "text": "You output only a unified diff. Follow LANGUAGE and ALLOWED_PATHS strictly; do not create files outside ALLOWED_PATHS. If ALLOWED_PATHS equals the default PHP scaffold, create that scaffold minimally."
        }
      ]
    },
    {
      "role": "user",
      "content": [
        {
          "type": "input_text",
          "text": "# Codex generation prompt\n\n## LANGUAGE (MUST)\n\nlanguage: php\n\n## ALLOWED_PATHS (only modify/create under these)\n\n- .blade.php\n- .jsx/.tsx\n- /app.php\n- /app/Locale/ja.json\n- /config.php\n- /index.php\n- /path/to.json\n- AUTO_REGEN_REPORT.json\n- COMPLIANCE.json\n- COMPLIANCE.json.html\n- Log.php\n- MANIFEST.json\n- Node.js\n- ROOT/COMPLIANCE.json\n- ROOT/evidence/verify/VERIFY_REPORT.json\n- ROOT/spec/tests/tools/langmap.json\n- STATE.json\n- Schema.php\n- TMPDIR/out.html\n- app.js\n- app.php\n- app/SOT/schema.required.json\n- app/Support/DB.php\n- app/Support/Res.php\n- app/Support/Schema.php\n- app/config.php\n- assets/theme.css\n- base.yml\n- blade.php\n- cli/build_rules.php\n- cli/import_db.php\n- cli/sync.php\n- composer.json\n- config.php\n- dist/.keep\n- env-lite.php\n- env_matrix.json\n- evidence/gen/AUTO_REGEN_PLAN.json\n- evidence/gen/GEN_PROVENANCE.json\n- evidence/pkg/GATE_SIG.json\n- evidence/runtime/.keep\n- evidence/static/.keep\n- evidence/static/PHPLINT_HASHES.json\n- evidence/verify/VERIFY_REPORT.json\n- file-globs.yml\n- gate-matrix.yml\n- health-lite.php\n- lang_profile.json\n- langmap.json\n- main.py\n- out/rules_packs.json\n- phpunit.xml\n- profiles/base.yml\n- profiles/dev.yml\n- profiles/prod.yml\n- public/.htaccess\n- public/index.php\n- rtm.yml\n- schema.required.json\n- schema.sql\n- spec/foundation/file-globs.yml\n- src/.keep\n- src/App/Controllers/HealthController.php\n- src/Bootstrap.php\n- src/Controller/HomeController.php\n- src/Http/HttpClient.php\n- src/Router.php\n- sync.php\n- tests/.keep\n- tests/HttpClientTest.php\n- tools/.keep\n- tools/lang_profile.json\n- tools/langmap.json\n\n### spec/env/README.md\n\n# spec / env（環境プロファイル：プラットフォーム非依存）\n\n本ディレクトリは **実行・配備環境の実値と方言ロック**を記述します。生成（foundation）や検査（tests）とは\n役割を分離し、**ここを唯一の実値SOT（Single Source of Truth）**とします。実値（パスワード等）は\nGit に直接書かず、`secrets/` のサンプルと CI/CD のシークレット管理を用います。\n\n- `policies.md` …… 主要方針（Apache/BNORM、no-store、DB方言、HTTPクライアント等）\n- `profiles/*.yml` …… 環境値のスキーマ化されたプロファイル（base/dev/prod）\n- `apache/htaccess.bnorm.conf` …… ディレクトリ相対BNORMの正本（サブディレクトリ安全）\n- `sql/policies.md` …… MySQL 8.0 方言ロック（DDL/Upsert/照合フォールバック等）\n- `cron/runner.md` …… 定期実行ランナの要件と例\n- `secrets/.env.example` …… 実値の置き場（**サンプルのみ**。実値はCI等で注入）\n\n> 本構成は、アップロードいただいた環境仕様（v1.0.6）の要求を抽象化し、値はプレースホルダ化しています。\n> 実値は CI のシークレットやサーバの `.env` で注入してください。\n\n### spec/env/cron/runner.md\n\n# cron / runner（例：単一cron + EmptyDB Auto-Fetch）\n\n# Asia/Tokyo（10分間隔）の例：\n*/10 * * * * cd {BASE} && php cli/sync.php --cycle >> storage/logs/cron.sync.log 2>&1\n\n## --cycle の疑似フロー（要約）\n- 排他取得 → 空判定（コア表の未存在、provider_rules=0 など）\n- 空なら --force で取得 → 変化があれば build_rules → import_db\n- 新着 0 が3サイクル継続で指数バックオフ（最大6h）\n\n### spec/env/policies.md\n\n# env / policies（方針・拘束事項）\n\n## 1) ランタイム前提（MUST）\n- PHP 8.3（CLI/CGI同一想定）。フレームワーク前提なし。PSR 準拠は任意。\n- Web: **Apache + mod_rewrite**。**AllowOverride FileInfo 以上**を付与。\n- HTTP クライアントは **cURL** を使用（`file_get_contents` 等のHTTP用途は不可）。\n\n## 2) Apache / BNORM（MUST）\n- `.htaccess` は **ディレクトリ相対で `app.php` へ集約**（BNORM）。**`RewriteBase /` の常時固定は不可**。\n- **`Options -MultiViews -Indexes` を必須**（内容ネゴシエーションを無効化）。\n- 正本は `apache/htaccess.bnorm.conf` を参照し、**そのまま配置**する。\n\n## 3) HTTP キャッシュ（MUST）\n- すべての応答に **`Cache-Control: no-store`** を付与（3xx を含む。301 は運用上禁止）。\n\n## 4) DB 方言ロック（MUST）\n- エンジン: **MySQL 8.0.x**（MariaDB 非対象）。\n- 文字コード: **utf8mb4**。照合: **utf8mb4_0900_ai_ci** を第一候補。不可時 **utf8mb4_unicode_ci** へ自動フォールバックし、**L2ログ**を記録。\n\n## 5) /health（最小ブート）\n- 役割: **スキーマ自己確保のみ**を行う最小ブート。データ投入（seed/import）は禁止。\n\n## 6) ログ\n- `/health` の成功/失敗を **1行JSON(L2)** で `storage/logs/app.log` に記録（`health_min_boot_pass|fail`）。\n\n## 7) コード実装スタイル・最低拘束\n- DB アクセスは **`App\\Support\\DB` の静的ファサード**を提供（`pdo()` / `q()` / `ensure_index()`）。\n- Support/** は **先頭〜80行以内**で自前依存を `require_once` し、読み込み順に依存しない。\n- リダイレクトは **常に BNORM 経由**（`href()` 等）。`header('Location: /...')` の直書きは禁止。\n\n### spec/env/profiles/base.yml\n\n# profiles/base.yml — 既定（全環境共通の最小セット）\nruntime:\n  php: \"8.3\"\n  web: \"apache-mod_rewrite\"\n  front_controller: \"app.php\"\n  http_client: \"curl\"\n  cache_control_no_store: true\n\ndb:\n  engine: \"mysql8\"\n  host: \"${DB_HOST}\"\n  port: \"${DB_PORT:-3306}\"\n  name: \"${DB_NAME}\"\n  user: \"${DB_USER}\"\n  pass: \"${DB_PASS}\"\n  charset: \"utf8mb4\"\n  collation_primary: \"utf8mb4_0900_ai_ci\"\n  collation_fallback: \"utf8mb4_unicode_ci\"\n\nhttp:\n  timeout_seconds: 30\n  retry: 3\n\npaths:\n  storage: \"storage\"\n  logs: \"storage/logs\"\n\nrules:\n  apache_allow_override: \"FileInfo+\"\n  apache_disable_multiviews: true\n  apache_disable_indexes: true\n  forbid_rewritebase_root: true  # 必要時のみ実配備パスを明記\n\n# -- env_matrix 参照キー（placeholder。実値は .env / CI secrets で注入）\n# DB_HOST=…\n# DB_NAME=…\n# DB_PASS=…\n# DB_PORT=…\n# DB_USER=…\n# SMTP_HOST=…\n# SMTP_PASS=…\n# SMTP_PORT=…\n# SMTP_USER=…\n# STORAGE_BUCKET=…\n# STORAGE_DRIVER=…\n# STORAGE_REGION=…\n# TENANT_SALT=…\n\n### spec/env/profiles/dev.yml\n\n# profiles/dev.yml — 開発向け（本番相当でテスト）\nextends: \"base.yml\"\nenv:\n  APP_ENV: \"development\"\n  LOG_LEVEL: \"debug\"\n  SYNC_MAX_PER_CYCLE: 1000\n  SYNC_DB_MIN_ROWS: 100\n  HTTP_TIMEOUT: 30\n  HTTP_RETRY: 3\n  STORAGE_BASE: \"storage\"\n\n# -- env_matrix 参照キー（placeholder。実値は .env / CI secrets で注入）\n# DB_HOST=…\n# DB_NAME=…\n# DB_PASS=…\n# DB_PORT=…\n# DB_USER=…\n# SMTP_HOST=…\n# SMTP_PASS=…\n# SMTP_PORT=…\n# SMTP_USER=…\n# STORAGE_BUCKET=…\n# STORAGE_DRIVER=…\n# STORAGE_REGION=…\n# TENANT_SALT=…\n\n### spec/env/profiles/prod.yml\n\n# profiles/prod.yml — 本番向け（セキュア設定を強化）\nextends: \"base.yml\"\nenv:\n  APP_ENV: \"production\"\n  LOG_LEVEL: \"info\"\n  SYNC_MAX_PER_CYCLE: 1000\n  SYNC_DB_MIN_ROWS: 100\n  HTTP_TIMEOUT: 30\n  HTTP_RETRY: 3\n  STORAGE_BASE: \"storage\"\n\n# -- env_matrix 参照キー（placeholder。実値は .env / CI secrets で注入）\n# DB_HOST=…\n# DB_NAME=…\n# DB_PASS=…\n# DB_PORT=…\n# DB_USER=…\n# SMTP_HOST=…\n# SMTP_PASS=…\n# SMTP_PORT=…\n# SMTP_USER=…\n# STORAGE_BUCKET=…\n# STORAGE_DRIVER=…\n# STORAGE_REGION=…\n# TENANT_SALT=…\n\n### spec/env/rtm.yml\n\n# env / rtm.yml — 要件トレーサビリティ（tests への橋渡し）\nenv_db_dialect_001:\n  desc: \"db_engine=mysql8 を COMPLIANCE.json で確認\"\n  evidence: \"COMPLIANCE.json\"\nenv_db_ddl_policy_mysql_001:\n  desc: \"IF NOT EXISTS 付き INDEX 禁止（grep）＋ E2E で index 存在確認\"\n  evidence: \"schema.sql; app/Support/Schema.php\"\nenv_db_upsert_mysql_001:\n  desc: \"VALUES() を Upsert で使用しない（静的）\"\n  evidence: \"app/Support\"\nenv_db_charset_001:\n  desc: \"照合フォールバック時に charset_fallback を L2ログへ\"\n  evidence: \"app/Support/DB.php; storage/logs/app.log\"\nenv_health_minboot_mysql_001:\n  desc: \"/health=最小ブート（スキーマのみ）\"\n  evidence: \"app.php; schema.sql\"\nenv_health_log_mysql_001:\n  desc: \"/health 成否ログ（health_min_boot_pass/fail）\"\n  evidence: \"storage/logs/app.log\"\nenv_schema_log_mysql_001:\n  desc: \"schema_exec_failed / schema_bootstrap_ok / schema_index_* を記録\"\n  evidence: \"app/Support/Schema.php; storage/logs/app.log\"\nenv_nostore_all_001:\n  desc: \"全3xx含め no-store・301禁止\"\n  evidence: \".htaccess; app.php\"\nenv_apache_multiviews_lock_001:\n  desc: \"Options -MultiViews を .htaccess へ明示\"\n  evidence: \".htaccess\"\nenv_apache_htaccess_bnorm_001:\n  desc: \"RewriteRule ^ app.php / RewriteEngine On / RewriteBase 固定禁止\"\n  evidence: \".htaccess\"\nenv_apache_allowoverride_001:\n  desc: \"AllowOverride FileInfo 以上を vhost で設定\"\n  evidence: \"httpd.conf (vhost) 設定\"\nenv_code_db_api_style_lock_001:\n  desc: \"`App::Support::DB` 静的ファサードを必ず提供\"\n  evidence: \"app/Support/DB.php; tools/run_checks.sh; php -r 検査証跡\"\nenv_code_msc_self_lock_001:\n  desc: \"Support自己完結（先頭〜80行で require_once）\"\n  evidence: \"app/Support/**; tools/run_checks.sh; evidence/static/MSC_LOG_DEP_OK.txt\"\nenv_code_health_no_classerr_001:\n  desc: \"/health 実行で Class not found を出さない\"\n  evidence: \"app.php; storage/logs/app.log; evidence/runtime/HEALTH_NO_CLASSERR_OK.txt\"\nenv_code_redir_bnorm_lock_002:\n  desc: \"Location 直書き禁止・href()必須\"\n  evidence: \"app/Support/Res.php; evidence/static/REDIR_ABS_PATH_OK.txt; REDIR_BNORM_USE_OK.txt\"\n\n### spec/env/sql/policies.md\n\n# sql / policies（MySQL 8.0.x 方言ロック）\n\n- **DDL: `CREATE INDEX IF NOT EXISTS` を禁止。**\n  - 実装: `information_schema.STATISTICS` による存在確認 → `CREATE INDEX` 実行の二段階で確保。\n- **Upsert: `INSERT … ON DUPLICATE KEY UPDATE` を使用し、`VALUES()` 参照は禁止。**\n- **文字コード/照合: `utf8mb4` / `utf8mb4_0900_ai_ci`。不可時 `utf8mb4_unicode_ci` にフォールバックし、L2ログへ `charset_fallback` を出力。**\n\n### spec/features/README.md\n\n# spec / features（機能仕様：プラットフォーム非依存）\n\n本ディレクトリは **機能要件**（URL動作、RBAC、データモデル、取込、UI、ログ、E2E受入）を言語やFWに依存せずに定義します。\n生成（foundation）・検査（tests）・環境（env）とは役割を分離し、ここでは**「何を実現するか」**のみを規範化します。\n\n- `policies.md` …… 前提・BNORM・no-store・HTTP/DB・禁止事項（MUST）\n- `endpoints.md` …… URL/早期ハンドラ/BNORM・各応答の規範\n- `provider_setup.md` …… `/provider/setup` の厳格ポリシー（GET無副作用/POST作成のみ/二回目以降非公開）\n- `data_model.md` …… DDL規範（列/固定行/インデックス/予約語回避/UPSERT方式）\n- `schema.required.json` …… **Schema SOT（唯一の機械可読正本）**\n- `env_matrix.json` …… 機能トグルと必須ENVキー（機械可読）\n- `imports.md` …… `/provider/db` と CLI 相当の取込要件・件数下限・冪等規範\n- `cli.md` …… `cli/sync.php` / `cli/build_rules.php` / `cli/import_db.php` の要件\n- `cron.md` …… 単一cron + EmptyDB Auto-Fetch 方針\n- `ui_rbac.md` …… 画面要件（Provider Dashboard/Rules、Tenants 新規、Admin Clerk 新規）とRBAC\n- `logs.md` …… L2ログ（1行JSON）イベント規範\n- `acceptance_e2e.md` …… 受入試験（H/A/B/C/D/E/F/G/I 等）\n\n> 値（DB接続等）は `spec/env/**` を唯一のSOTとし、本書は**機能の振る舞い**のみを規範化します。\n\n### spec/features/acceptance_e2e.md\n\n# features / acceptance_e2e（受入試験：抜粋）\n\n- H) Tenants 新規：GET フォーム項目の存在 → POST 成功で tenants/users に1行（admin, force_reset=1）→ 重複でロールバック。\n- A) /health 最小ブート：`{ ok:true, db_ok:true, initialized:true }`。\n- B) 取込（内包）：/provider/login → /provider/db（引数なし）= 200、`rules ≥ 208` かつ `departments ≥ 35`。\n- C) 取込（外部 packs）：/provider/db?packs=... = 200、増分または冪等、`departments ≥ 35` 維持。\n- D) CLI 互換：`php cli/import_db.php`（引数なし）= 0。再実行で件数不変。\n- E) ネガ：`sync.php exit=3`（seed_missing）、`exit=2`（download_failed）。\n- F) UI-E2E（Provider Tenants）3点。\n- G) SetupForm：`users=0` で GET 2 回 = 200 + 無副作用、POST 作成後 302→/provider/login（no-store）、`force_reset=1`。\n- I) Clerk 新規：`users(role='clerk')` を tenant_id 紐付けで作成。重複は 4xx + ロールバック。\n\n### spec/features/cli.md\n\n# features / cli（CLI 要件）\n\n- `cli/sync.php`：cURL ベースの実ネット取得。`--cycle` は EmptyDB Auto-Fetch を実装。`SYNC_SEED_URLS` 未設定は exit=3。\n- `cli/build_rules.php`：テンプレ到達性検査。`--strict` 到達0件は exit=2。\n- `cli/import_db.php`：/provider/db と等価の取込。診療科 upsert も実施。\n\n### spec/features/cron.md\n\n# features / cron（単一cron + EmptyDB Auto-Fetch）\n\n- 例（Asia/Tokyo）: `*/10 * * * * cd {BASE} && php cli/sync.php --cycle >> storage/logs/cron.sync.log 2>&1`\n- 空判定：コア表未存在／`provider_rules=0` または ENV 最小値未満（min 25）／`departments<35`。\n- 空なら **force 取得 → build_rules → import（/provider/db 同等：ルール＋診療科）** を行う。\n\n### spec/features/data_model.md\n\n# features / data_model（DDL規範・UPSERT・固定行）\n\n## 列・制約（抜粋 / MUST）\n- `users` に `tenant_id INT NULL`（FK: tenants.id）。Provider は NULL、Admin/Clerk は作成テナントの ID を必須設定。\n- `users.email` は **全体ユニーク**。`users.username` は **廃止**（参照禁止）。\n- `provider_rules` は `rule_condition` / `rule_action`（入力JSONの `condition` / `action` をマッピング）。\n- `sync_commands` に `ix_sc_status_requested(status, requested_at, id)`（IF NOT EXISTS 禁止→存在確認後に作成）。\n- **固定行**：`rules_sync_state(id=1)` / `sync_runner_state(id=1)` を保証。\n\n## UPSERT 方針（MUST）\n- **採用**：`INSERT ... VALUES (...) AS new ON DUPLICATE KEY UPDATE col = new.col`\n- **禁止**：`... UPDATE col = VALUES(col)`（`/* FORBIDDEN: VALUES() */`）\n- 適用：`provider_rules`, `departments`, `users`（/provider/setup 作成時）ほか全UPSERT。\n\n## 予約語回避\n- DB の識別子（テーブル/列/インデックス/制約名）に予約語を使用しない。入力データのキー名が予約語でも DB 列名へ転用しない。\n\n## 代表テーブル（規範）\n- `tenants`, `users`, `departments`, `provider_rules`, `patients`, `claims`, `claim_items`, `audit_rules`, `tenant_rule_overrides`, `sync_commands`, `rules_sync_state`, `sync_runner_state`, `import_runs`, `job_runs`。\n\n### spec/features/endpoints.md\n\n# features / endpoints（URL動作・早期ハンドラ・BNORM）\n\n## 早見表（主要）\n| Path | 要旨 | 応答 | 備考 |\n|---|---|---|---|\n| `/env` | FC 最上流で JSON 直返し | 200 JSON + no-store | require/include/autoload/session_start/ob_start 禁止 |\n| `/env/` | `/env` と等価 | 200 JSON + no-store | 末尾スラ差で意味が変わらない |\n| `/env-lite` | 物理ファイル直返し | 200 | `.htaccess` で -f 素通し |\n| `/health-lite` | 物理ファイル直返し | 200 | 同上 |\n| `/health` | **最小ブート（スキーマのみ）** | 200 JSON + no-store | seed/import 禁止 |\n| `/` | ログインへ誘導 | 302 → `/login` + no-store | 301 禁止 |\n| `/provider` | Provider 入口 | 302 → `/provider/login` + no-store | 末尾スラ任意 |\n| `/provider/login` | Provider ログイン | 200 | |\n| `/provider/setup` | 初期ユーザー作成（厳格ポリシー） | GET: 初回のみ200（無副作用） / POST: 作成→302 login | 二回目以降は GET/POST とも 302 |\n\nBNORM（Directory‑relative Front Controller）により、サブディレクトリ配備でも同一動作を保証します。\n\n### spec/features/env_matrix.json\n\n{\n  \"FEATURE_MAIL\": [\n    \"SMTP_HOST\",\n    \"SMTP_PORT\",\n    \"SMTP_USER\",\n    \"SMTP_PASS\"\n  ],\n  \"FEATURE_STORAGE\": [\n    \"STORAGE_DRIVER\",\n    \"STORAGE_BUCKET\",\n    \"STORAGE_REGION\"\n  ],\n  \"FEATURE_DB\": [\n    \"DB_HOST\",\n    \"DB_NAME\",\n    \"DB_USER\",\n    \"DB_PASS\",\n    \"DB_PORT\"\n  ],\n  \"FEATURE_PROVIDER_MULTI_TENANT\": [\n    \"TENANT_SALT\"\n  ]\n}\n### spec/features/imports.md\n\n# features / imports（/provider/db と CLI の要件）\n\n## /provider/db（唯一のアプリ内取込エンドポイント）\n- 役割：**(1) ルール適用** と **(2) 診療科の冪等投入** を**明示操作**で実行。\n- 認可：Provider ログイン必須（未ログインは 302→/provider/login）。\n- 入力：\n  - `GET /provider/db`（引数なし＝**内包ルール**を適用）＋ **診療科を upsert**。\n  - `GET /provider/db?packs=/path/to.jsonl`（**外部ルールパック**）＋ **診療科を upsert**。\n- トランザクション：**ファイル単位**で 1 トランザクション。診療科 upsert は別トランザクション。\n- 記録：`import_runs` に `pack_name/sha256/inserted/updated/failed/lines_read`。\n- L2 ログ：`rules_packs_apply_start/ok/failed`, `departments_seed_apply_start/ok/failed`。\n- 成功応答：`{ ok:true, applied:true, counts:{provider_rules:N, departments:M}, pack:{name,sha256} }`（200 + no-store）。\n\n## 件数下限（受入）\n- ルール：**最終 N ≥ 208**（Base25 + A〜D。内包追加バッチがあれば加算）。\n- 診療科：**最終 M ≥ 35**。\n\n## 冪等性\n- 同一データで再実行しても N/M は増え続けない（更新または無変更）。\n\n## CLI 互換\n- `cli/sync.php`：実ネット取得。`SYNC_SEED_URLS` 未設定は exit=3（seed_missing）。`--cycle` は EmptyDB Auto-Fetch。\n- `cli/build_rules.php`：テンプレ到達性検査。`--strict` 到達0件は exit=2。\n- `cli/import_db.php`：**/provider/db 相当**。引数なし＝内包、`--packs` 指定＝外部。診療科 upsert も実施。\n\n### spec/features/logs.md\n\n# features / logs（L2：1行JSON）\n\n- 代表イベント：\n  - `db_connect_failed`, `schema_bootstrap_ok/failed`, `seed_upsert_fallback`\n  - `rules_packs_apply_start/ok/failed`, `departments_seed_apply_start/ok/failed`\n  - `auth_login/logout/guard_blocked`\n  - `setup_allowed/setup_created/setup_redirected`\n  - `tenants_create_start/ok/failed`, `tenant_admin_created`, `tenant_clerk_created`\n- フォーマット：`{timestamp, level, event, file, line, ...}` を**1行JSON**で。\n\n### spec/features/policies.md\n\n# features / policies（前提・規範・禁止事項）\n\n## 対象・前提（MUST）\n- PHP 8.3（CLI/CGI同一）。フレームワーク不使用、PSR 任意。\n- Web: Apache + mod_rewrite（.htaccess 有効、RewriteBase 任意、END 禁止）。\n- DB: MySQL 8.0.19+、utf8mb4、照合 utf8mb4_0900_ai_ci（不可時 utf8mb4_unicode_ci に自動フォールバックし L2 ログ）。\n- フロントコントローラ（FC）: `{BASE}/app.php`（サブディレクトリ配備に非依存／BNORM）。\n- HTTP クライアントは cURL のみ（`file_get_contents` 等でのネット取得は禁止）。\n- ログ（L2）必須、AUTH-REALM-SPLIT（/provider と一般の分離）必須。\n\n## URL / BNORM / キャッシュ（MUST）\n- `/env`：FC最上流で JSON 直返し（no-store）。`/env/` も 200。同フェーズでの require/include/autoload/session_start/ob_start 禁止。\n- `/env-lite` `/health-lite`：物理ファイル直返し（FC 特有ヘッダ無し）。Rewrite は `-f/-d` 優先素通し。\n- `/health`：**最小ブート（スキーマのみ）**。seed/import 禁止。\n- `/`：302 → `/login`（no-store、301 禁止）。\n- **全応答**に `Cache-Control: no-store` を付与（3xx 含む、301 禁止）。\n- BNORM: `dirname($_SERVER['SCRIPT_NAME'])` を用い、末尾スラ有無で経路解釈を変えない（`/env` と `/env/` は 200）。\n\n## AUTH-REALM-SPLIT（MUST）\n- Provider Realm：`/provider` → 302 `/provider/login`、`/provider/setup`（初回 GET のみ公開/無副作用・POST 作成のみ・二回目以降は非公開）。\n- General Realm：`/login` を入口。`/admin/*` `/clerk/*` は認証必須（未ログインは 302→/login）。\n- 禁止：/health 等でのユーザー/テナント自動作成。\n\n## 禁止・その他\n- 301 全禁止。ログは 1 行 JSON（L2）。HTTP は no-store。DB は MySQL 8.0 方言固定。\n\n### spec/features/provider_setup.md\n\n# features / provider_setup（/provider/setup の厳格ポリシー）\n\n## 要件（MUST）\n- **GET（初回のみ公開）**：`users=0` の**初回のみ** 200。**無副作用の HTML フォーム**（email, password）表示。HEAD も 200 + no-store。301 禁止。\n- **POST（作成のみ）**：初期ユーザー作成時に `role='provider'`, `force_reset=1` を**必須**付与。成功後 **302 → /provider/login（no-store）**。\n- **2回目以降（users>0）**：**GET/POST とも** 302 → `/provider/login`（no-store）。フォームは非公開。\n- **UI**：公開画面から `/provider/setup` へのリンクは**アンカー禁止**（文言のみ）。`X-Robots-Tag: noindex, nofollow, noarchive` 推奨。\n\n## 受入判定（E2E）\n- A) `users=0` 環境で GET を連続2回：**200 + 無副作用**（`users` 件数不変）。\n- B) POST 後、**1 行作成**・`force_reset=1`・**302 → /provider/login（no-store）**。\n- C) `users>0` 環境で **GET/POST とも 302**（**301 が 0 件**）。\n\n### spec/features/schema.required.json\n\n{\n  \"version\": \"1.1\",\n  \"tables\": [\n    \"tenants\",\n    \"users\",\n    \"departments\",\n    \"provider_rules\",\n    \"patients\",\n    \"claims\",\n    \"claim_items\",\n    \"audit_rules\",\n    \"tenant_rule_overrides\",\n    \"sync_commands\",\n    \"rules_sync_state\",\n    \"sync_runner_state\",\n    \"import_runs\",\n    \"job_runs\"\n  ],\n  \"fixed_rows\": [\n    {\n      \"table\": \"rules_sync_state\",\n      \"pk\": \"id\",\n      \"value\": 1\n    },\n    {\n      \"table\": \"sync_runner_state\",\n      \"pk\": \"id\",\n      \"value\": 1\n    }\n  ],\n  \"indexes\": [\n    {\n      \"table\": \"sync_commands\",\n      \"name\": \"ix_sc_status_requested\",\n      \"columns\": [\n        \"status\",\n        \"requested_at\",\n        \"id\"\n      ]\n    }\n  ]\n}\n### spec/features/ui_rbac.md\n\n# features / ui_rbac（UI と RBAC の要件）\n\n## Provider Dashboard（最小）\n- `/provider/dashboard`：ログイン後ランディング。見出し「Provider Dashboard」＋クイックリンク（Tenants, ルール適用 `/provider/db`, グローバルルール `/provider/rules`, ジョブ, ログアウト）。\n- **機能が 0 件でも 200**。\n\n## Provider Global Rules\n- `/provider/rules`：一覧/検索/詳細を提供（編集は MUST）。表示：title, version, source_date, created_at、詳細は `rule_condition` / `rule_action`。\n\n## Tenants（新規）\n- **GET `/provider/tenants/new`**：200（no-store）。フォーム：`tenant_name`, `admin_email`, `admin_password`, `csrf_token`。\n- **POST `/provider/tenants/new`**：CSRF 必須。**1 トランザクション**で `tenants` 作成 → `users(admin)` 作成（`tenant_id` 紐付け、`force_reset=1`）。成功は **201** または **302→/provider/tenants**、失敗は **422/400**（部分作成禁止）。\n\n## Admin Clerk 新規作成\n- **GET `/admin/clerk/new`**：200（no-store）。フォーム：`clerk_email`, `clerk_password`, `csrf_token`。\n- **POST `/admin/clerk/new`**：`users(role='clerk', tenant_id=<adminのtenant_id>, force_reset=1)` を作成。成功は **201** または **302→/admin/users`、失敗は **422/400**。\n\n### spec/foundation/README.md\n\n# spec / foundation（生成仕様：プラットフォーム非依存）\n\nこのディレクトリは、**生成**そのものに必要な共通ルールだけを収めます。Chat/対話に依存せず、\nCI/CD（ジョブ、アーティファクト、リリース等）で完結する前提です。\n\n- `policies.md` …… 生成規約・フロー・AHR・安全規約（Chat 前提の記述は排除）\n- `contracts.md` …… 生成 I/O の取り決め（成果物は `dist/*.zip` と証跡、合否は Exit Code とファイル）\n- `file-globs.yml` …… 生成で書き換え可能な領域・必須ディレクトリ・雛形\n\n> 環境・機能の固有要件は `spec/env/**`, `spec/features/**` など別紙に置き、foundation には混在させない方針です。\n\n### spec/foundation/contracts.md\n\n# foundation / contracts（生成I/O契約：プラットフォーム非依存）\n\n> 生成の**入出力の取り決め**を定義します。（対話UIに非依存） での応答文言や「CIアーティファクトのURL」は扱いません。\n\n## 1. 出力ディレクトリとファイル（MUST）\n- 生成物：ソース一式（`src/**`, `public/**`, `app.php` など）。\n- 証跡：`evidence/**`（`static/`, `runtime/`, `pkg/` 等のカテゴリを持つ）。\n- 準拠情報：`COMPLIANCE.json`（最低限下記キーを含む）。\n- 成果物：`dist/package.zip`（`tools/pack.*` 経由で作成）。\n\n### 1.1 COMPLIANCE.json（例）\n```json\n{\n  \"full_only_acceptance\": true,\n  \"pack_provenance_ok\": true,\n  \"zip_ready_ok\": true,\n  \"polyglot_lint_ok\": true,\n  \"html_ls_global_ok\": true,\n  \"err_guard_ok\": true,\n  \"verify_report_ok\": true\n}\n```\n\n### 1.2 MANIFEST.json（例：抜粋）\n```json\n{\n  \"files\": [\n    \"app.php\",\n    \"env-lite.php\",\n    \"health-lite.php\",\n    \"src/App/Controllers/HealthController.php\"\n  ]\n}\n```\n\n## 2. 検査との接続\n- 生成直後に `tools/run_checks.*` を実行し、**Exit Code** と **証跡ファイル**で合否を返す。\n- 不合格時は AHR を起動し、修復ののち再検査。最終的に合格しない場合は **CI を失敗**で終了する。\n\n## 3. 成果物の公開\n- `dist/*.zip` を **CI/CD のアーティファクト**として公開する（もしくはパッケージレジストリ／オブジェクトストレージへアップロード）。\n- 公開先 URL は CI が発行・掲示する（人手での “リンク提示” は仕様外）。\n\n## 4. ロギング\n- 主要処理の節目で `evidence/static/*.txt` に OK/NG のシグナルを出力し、CI ログにも同一の行を記録する。\n- 例：`EVIDENCE:POLYGLOT_LINT_OK` / `EVIDENCE:HTML_LS_BASE_OK` / `EVIDENCE:ERR_GUARD_INJECTED`。\n\n### spec/foundation/file-globs.yml\n\nrequired_dirs:\n- src\n- tests\n- tools\n- storage\n- evidence\n- dist\nallowed_write:\n- src/**\n- tests/**\n- tools/**\n- storage/**\n- evidence/**\n- dist/**\n- .htaccess\n- app.php\n- env-lite.php\n- health-lite.php\n- COMPLIANCE.json\nforbidden_write:\n- spec/**\n- .github/**\n- ai/**\n- /*\nscaffold:\n- path: src/.keep\n- path: tests/.keep\n- path: tools/.keep\n- path: evidence/static/.keep\n- path: evidence/runtime/.keep\n- path: dist/.keep\n\n### spec/foundation/policies.md\n\n# foundation / policies（プラットフォーム非依存・生成専用）\n\n> 本書は *生成* に関わる共通規約・フローのみを定義します。**対話（（対話UIに非依存））前提の文言は一切使用しません。**\n> 生成結果の通知・配布は CI/CD のアーティファクト、リリース、あるいは任意の成果物ストアを用います。\n\n## 0. スコープと原則（MUST）\n- 本書は「生成」のみを対象とする。**環境固有値**や**機能固有の要件**は別紙（env/features）に置く。\n- 生成は **再現可能・差分最小** を原則とし、同じ入力に対して同じ成果物が得られる。\n- 出力は **ワークツリー**上に作成し、その後 **CI/CD が成果物として収集**・配布する。対話的な「アーティファクト取得」提示は行わない。\n\n## 1. 実行モード\n- `full` : 既存生成物を更地化し、**必要ファイルを一式再生成**する。\n- `incremental` : 変更影響範囲のみを更新し、未変更部分は保持する。\n\n## 2. AHR（Auto‑Heal & Retry：自動修復）\n- Gate 失敗・欠落が検出された場合、**最小差分の修復**を最大 3 ラウンドまで実施し、各ラウンドごとに検査をリラン。\n- AHR 対象例：LITERAL 正規化、import/using の注入、HTML LS 必須タグ注入、相対リンクの標準化、ERR‑GUARD の補完 等。\n- 仕様逸脱や環境値欠落は AHR 対象外とし、**検査側で不備を明示**する。\n\n## 3. 生成フロー（概略）\n1. **前処理**：必要ディレクトリの確保、`spec/foundation/file-globs.yml` の読込、ワークスペース整備。\n2. **合成**：生成に必要な仕様（foundation + 当該機能・環境）を結合し、プロンプト/計画を作成。\n3. **生成**：コード・設定・スクリプトを出力。`allowed_write` に適合しないパスは書き込み禁止。\n4. **検査**：`tools/run_checks.*` を実行し、証跡と `COMPLIANCE.json` を生成。\n5. **AHR**：不合格時は最小差分修復→検査を最大 3 ラウンド。\n6. **成果物化**：`tools/pack.*` で ZIP/TAR を `dist/` へ出力。**CI/CD がアーティファクトとして公開**する。\n\n## 4. 納品の取り扱い（（対話UIに非依存） 非依存）\n- 納品物は **CI/CD のアーティファクト**・**パッケージレジストリ**・**リリース資産**などに発行する。\n- ログは CI ジョブログと `evidence/**` に保存し、**人手の “CIアーティファクトのURL提示” は要求しない**。\n- 受け入れ判断は `COMPLIANCE.json` と Gate 証跡に基づき **自動**で行う。\n\n## 5. 安全規約\n- `spec/**`, `.github/**`, `ai/**` は生成対象外（補助スクリプトの追加は別途合意時に限る）。\n- 生成ファイルは **UTF‑8 LF**。外部依存導入は方針に明記された場合のみ可。\n- `file-globs.yml` の `forbidden_write` に抵触する変更は破棄し、エラーとする。\n\n### spec/tests/README.md\n\n# spec / tests（検査仕様：プラットフォーム非依存）\n\n本ディレクトリは **検査（tests）** の共通規約とゲートを定義します。言語やフレームワークに依存しない\n**Polyglot 前提**で記述し、必要に応じて各言語アダプタ（リンタ・テンプレ検出など）で具体化します。\n\n- `policies.md` …… 検査の原則・必須ゲート・証跡の取り扱い\n- `gate-matrix.yml` …… Phase S/B/D のゲート定義（言語非依存名）\n- `runner/run_checks.sh` …… 安定ランナー（静粛合格・厳格モード・証跡書き出し）\n- `tools/langmap.json` / `tools/polyglot_lint.sh` / `tools/render_smoke.sh` / `tools/verify_report.sh` …… 代表実装\n- `checks/*.md` …… 代表チェック（HTML-LS、ERR-GUARD、storage、manifest等）\n\n> 成果物の配布や受入判定は CI/CD 側のルールに従い、**対話的なアーティファクト取得や手詰めZIP**は想定しません。\n\n### spec/tests/gate-matrix.yml\n\nphase_s:\n- key: polyglot_lint_ok\n  must: true\n  evidence: evidence/static/POLYGLOT_LINT_OK.txt\n- key: html_ls_global_ok\n  must: true\n  evidence: evidence/static/HTML_LS_GLOBAL_OK.txt\n- key: tools_presence_ok\n  must: true\n  evidence: evidence/static/TOOLS_OK.txt\n- key: storage_writable_ok\n  must: true\n  evidence: evidence/static/STORAGE_BASE_OK.txt\nphase_b:\n- key: health_boot_head_ok\n  must: true\n  evidence: evidence/runtime/HEALTH_BOOT_HEAD_OK.txt\nphase_d:\n- key: sot_schema_dynamic_ok\n  must: false\n  evidence: evidence/runtime/SOT_SCHEMA_DYNAMIC_OK.txt\npack:\n  must_all_true:\n  - verify_report_ok\n  - zip_ready_ok\n  - pack_provenance_ok\n\n### spec/tests/policies.md\n\n# tests / policies（検査規約・共通）\n\n## 1. 原則（MUST）\n- **言語非依存**：まず合格条件を言語非依存で定義し、実行は言語アダプタに委譲。\n- **静粛合格**：すべて合格のとき標準出力は空。失敗時のみ `NG:` 行を出し非0終了。\n- **再現可能**：`export LC_ALL=C LANG=C` の固定、`set -Eeuo pipefail`（bash）。\n- **証跡**：`evidence/static`, `evidence/runtime`, `evidence/pkg`, `evidence/verify` を常備し、OK/ERRをファイルで残す。\n- **禁止**：`/dev/fd/*` やプロセス置換 `<( )`、Here-String `<<<` 等の環境依存I/O。\n\n## 2. 基本ゲート（抜粋）\n- **POLYGLOT-LINT（H-20G）**：言語検出に基づく実リンタ/構文検証を実施し、`polyglot_lint_ok=true`。\n- **HTML-LS-GLOBAL（H-23G）**：出力HTMLのベースライン（`<!doctype html>`, `<meta charset=\"utf-8\">`, `<html lang=\"..\">`）。\n- **HEALTH-BOOT-HEAD（H-21H）**：`/health` HEAD が `200` + `Cache-Control: no-store` + `Content-Type: application/json`。\n- **VERIFY-REPORT**：`evidence/**` と `COMPLIANCE.json` を集約して `evidence/verify/VERIFY_REPORT.json` を生成。\n\n## 3. ランナー要件（run_checks.sh）\n- 先頭で厳格モードとロケール固定。合格時は無出力で0終了。\n- 代表手順：polyglot_lint → render_smoke(HTML-LS) → verify_report。\n- すべてのログ/OKファイルは `evidence/**` 配下に保存。\n\n## 4. パッケージング連携（pack.sh など）\n- ZIP 生成は **すべての必須ゲートが PASS**、かつ `COMPLIANCE.json` の必須キーが true のときのみ許可。\n- 手詰めZIPや `tools/` 非経由の証跡生成は禁止（pack provenance をロック）。\n\n### spec/tests/tools/langmap.json\n\n{\n  \"php\":    {\"ext\": [\"php\"],        \"templates\": [\"app/Pages\",\"templates\",\"resources/views\",\"public\"]},\n  \"html\":   {\"ext\": [\"html\",\"htm\"], \"templates\": [\"public\",\"templates\"]},\n  \"twig\":   {\"ext\": [\"twig\"]},\n  \"blade\":  {\"ext\": [\"blade.php\"]},\n  \"ejs\":    {\"ext\": [\"ejs\"]},\n  \"hbs\":    {\"ext\": [\"hbs\",\"handlebars\"]},\n  \"vue\":    {\"ext\": [\"vue\"]},\n  \"jsx\":    {\"ext\": [\"jsx\",\"tsx\"]}\n}\n\n## STRICT OUTPUT RULES\n\n- Return ONE unified diff (UTF-8), repository-rooted; no prose, no code fences.\n- Modify/create files **only** under ALLOWED_PATHS. When ALLOWED_PATHS matches the default PHP scaffold above, you MUST create that scaffold at minimum.\n- PHP runtime: 8.3 (CLI/CGI). No framework assumption. PSR compliance optional.\n- Web: Apache + mod_rewrite; AllowOverride FileInfo+.\n- HTTP client: use cURL only (disallow file_get_contents for HTTP).\n"
        }
      ]
    }
  ]
}
