name: "Codex Generate & PR (auto cleanup)"

on:
  push:
    branches: ["**"]
    paths: ["spec/**", "AGENTS.md"]
  pull_request:
    paths: ["spec/**", "AGENTS.md"]
  workflow_dispatch:
    inputs:
      model:
        description: "（任意）モデル名（未指定＝既定）"
        required: false
  # PR が閉じられた時（merged/closed）にもこのファイルを起動して掃除する
  pull_request_target:
    types: [closed]

permissions:
  contents: write
  pull-requests: write

concurrency:
  group: "codex-${{ github.ref }}"
  cancel-in-progress: false

jobs:
  # =========================
  # 1) 生成 → PR 作成
  # =========================
  generate:
    # cleanup 専用イベント時はこのジョブは走らせない
    if: ${{ github.event_name != 'pull_request_target' }}
    runs-on: "ubuntu-latest"

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v4"
        with: { fetch-depth: 0 }

      - name: "Set Git identity (CI)"
        shell: "bash"
        run: |
          set -eu
          git config --global user.email "ci-bot@example.invalid"
          git config --global user.name  "CI Bot"
          git config --global --add safe.directory "$GITHUB_WORKSPACE"

      - name: "Assert required specs exist"
        shell: "bash"
        run: |
          set -euo pipefail
          for f in spec/generation.txt spec/testing.txt spec/environment.txt spec/functional.txt; do
            [ -f "$f" ] || { echo "::error::Missing spec: $f"; exit 1; }
          done

      - name: "Build composite prompt"
        id: "prompt"
        shell: "bash"
        run: |
          set -euo pipefail
          PROMPT_FILE="$RUNNER_TEMP/prompt.md"
          : > "$PROMPT_FILE"
          # 即実装・Clarification禁止・生成先・成果物の最低限ルール
          cat >> "$PROMPT_FILE" <<'PRELUDE'
          # TASK
          - Clarification（質問・保留）を行わずに実装を完了する。
          - 出力はパッチ（ファイルの追加/更新）のみ。説明文は不要。
          - 生成先: `src/**`（アプリ本体）、`tests/**`（テスト）。必要に応じて `app.php`, `.htaccess`,
            `env-lite.php`, `health-lite.php` を作成可。

          ## DELIVERABLES
          - app.php
          - src/**
          - tests/**
          PRELUDE

          # AGENTS.md（あれば先頭）
          if [ -f "AGENTS.md" ]; then
            printf "\n\n---\n\n# AGENTS.md\n\n" >> "$PROMPT_FILE"
            sed -e 's/\r$//' "AGENTS.md" >> "$PROMPT_FILE"
          fi

          # 4仕様書を固定順で結合：生成→検査→環境→機能
          for f in spec/generation.txt spec/testing.txt spec/environment.txt spec/functional.txt; do
            printf "\n\n---\n\n# %s\n\n" "$f" >> "$PROMPT_FILE"
            sed -e 's/\r$//' "$f" >> "$PROMPT_FILE"
          done

          echo "file=$PROMPT_FILE" >> "$GITHUB_OUTPUT"

      - name: "Preflight: OPENAI_API_KEY"
        env: { OPENAI_API_KEY: "${{ secrets.OPENAI_API_KEY }}" }
        shell: "bash"
        run: |
          set -eu
          [ -n "${OPENAI_API_KEY:-}" ] || { echo "::error::OPENAI_API_KEY missing"; exit 1; }
          echo "OPENAI_API_KEY present"

      - name: "Run Codex"
        id: "codex"
        uses: "openai/codex-action@main"
        env: { OPENAI_API_KEY: "${{ secrets.OPENAI_API_KEY }}" }
        with:
          openai-api-key: "${{ secrets.OPENAI_API_KEY }}"
          prompt-file: "${{ steps.prompt.outputs.file }}"
          model: "${{ github.event.inputs.model }}"
          sandbox: "workspace-write"

      - name: "Discard workflow edits (safety)"
        shell: "bash"
        run: |
          set -eu
          if git status --porcelain | grep -E '^[AMDR].*\.github/workflows/'; then
            echo "::warning::Discarding .github/workflows changes"
            git checkout -- ".github/workflows" || true
            git restore --staged ".github/workflows" || true
          fi

      - name: "Detect changes"
        id: "diff"
        shell: "bash"
        run: |
          set -eu
          if git diff --quiet; then
            echo "changed=false" >> "$GITHUB_OUTPUT"
            echo "No changes."
          else
            echo "changed=true" >> "$GITHUB_OUTPUT"
            git diff --name-only || true
          fi

      - name: "Create Pull Request (only if changed)"
        if: ${{ steps.diff.outputs.changed == 'true' }}
        uses: "peter-evans/create-pull-request@v7"
        with:
          token: "${{ github.token }}"
          title: "AI: apply Codex changes"
          body: |
            Automated changes generated by Codex from combined specs.
          commit-message: "chore(ai): apply Codex changes"
          branch: "ai/codex/batch-${{ github.run_id }}"
          base: "main"
          delete-branch: true  # ← アクションが自分でPRをクローズする場合に有効

  # =========================
  # 2) マージ後クリーンアップ（自動削除）
  # =========================
  cleanup_branch:
    name: "Delete ai/codex/batch-* after merge"
    if: >
      ${{
        github.event_name == 'pull_request_target' &&
        github.event.action == 'closed' &&
        github.event.pull_request.merged == true &&
        startsWith(github.event.pull_request.head.ref, 'ai/codex/batch-') &&
        github.event.pull_request.head.repo.full_name == github.repository
      }}
    runs-on: "ubuntu-latest"
    permissions:
      contents: write

    steps:
      - name: "Delete head branch via API"
        uses: "actions/github-script@v7"
        with:
          script: |
            const headRef = context.payload.pull_request.head.ref; // e.g. ai/codex/batch-1234567890
            const ref = `heads/${headRef}`;
            core.info(`Deleting ref ${ref} ...`);
            await github.rest.git.deleteRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref
            });
            core.info(`Deleted ${ref}`);
