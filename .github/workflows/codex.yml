name: "Codex Generate & Test (self-heal, spec write-back)"

on:
  push:
    branches: ["**"]
    paths: ["spec/**", "AGENTS.md"]
  pull_request:
    paths: ["spec/**", "AGENTS.md"]
  workflow_dispatch:
    inputs:
      model:
        description: "（任意）使用するモデル名（未指定＝既定）"
        required: false
      env_spec:
        description: "（任意）環境仕様書のパス（例: spec/environment.prod.txt）"
        required: false
      func_spec:
        description: "（任意）機能仕様書のパス（例: spec/functional.receipts.txt）"
        required: false
      max_fixes:
        description: "テスト失敗時の自動修正トライ回数（0〜2）"
        required: false
        default: "1"

permissions:
  contents: write
  pull-requests: write

concurrency:
  group: "codex-${{ github.ref }}"
  cancel-in-progress: false

jobs:
  codex:
    runs-on: "ubuntu-latest"

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v4"
        with:
          fetch-depth: 0

      - name: "Set Git identity (CI)"
        shell: "bash"
        run: |
          set -eu
          git config --global user.email "ci-bot@example.invalid"
          git config --global user.name  "CI Bot"
          git config --global --add safe.directory "$GITHUB_WORKSPACE"

      - name: "Resolve spec set (common + selected)"
        id: "resolve"
        shell: "bash"
        run: |
          set -euo pipefail
          COMMON_GEN="spec/generation.txt"
          COMMON_TEST="spec/testing.txt"
          ENV_IN="${{ github.event.inputs.env_spec }}"
          FUNC_IN="${{ github.event.inputs.func_spec }}"

          # 必須: generation/testing が無ければ失敗
          for f in "$COMMON_GEN" "$COMMON_TEST"; do
            if [ ! -f "$f" ]; then
              echo "::error::Missing required common spec: $f"
              exit 1
            fi
          done

          # 環境仕様書の選定
          pick_env=""
          if [ -n "$ENV_IN" ] && [ -f "$ENV_IN" ]; then
            pick_env="$ENV_IN"
          elif [ -f spec/environment.txt ]; then
            pick_env="spec/environment.txt"
          else
            env_candidates=$(ls -1 spec/environment*.txt 2>/dev/null || true)
            if [ -n "$env_candidates" ]; then
              pick_env="$(printf '%s\n' $env_candidates | sort | tail -n1)"
            else
              echo "::warning::No environment spec found (optional)"
            fi
          fi

          # 機能仕様書の選定
          pick_func=""
          if [ -n "$FUNC_IN" ] && [ -f "$FUNC_IN" ]; then
            pick_func="$FUNC_IN"
          elif [ -f spec/functional.txt ]; then
            pick_func="spec/functional.txt"
          else
            func_candidates=$(ls -1 spec/functional*.txt 2>/dev/null || true)
            if [ -n "$func_candidates" ]; then
              pick_func="$(printf '%s\n' $func_candidates | sort | tail -n1)"
            else
              echo "::warning::No functional spec found (optional)"
            fi
          fi

          echo "gen=$COMMON_GEN"   >> "$GITHUB_OUTPUT"
          echo "test=$COMMON_TEST" >> "$GITHUB_OUTPUT"
          echo "env=$pick_env"     >> "$GITHUB_OUTPUT"
          echo "func=$pick_func"   >> "$GITHUB_OUTPUT"

          echo "Using specs:"
          echo "  generation: $COMMON_GEN"
          echo "  testing:    $COMMON_TEST"
          echo "  environment: ${pick_env:-'(none)'}"
          echo "  functional:  ${pick_func:-'(none)'}"

      - name: "Build composite prompt (write-back + deliverables)"
        id: "prompt"
        shell: "bash"
        run: |
          set -euo pipefail
          PROMPT_FILE="$RUNNER_TEMP/prompt.md"
          TODAY="$(date -u +%Y-%m-%d)"
          : > "$PROMPT_FILE"

          # 実装方針 + 仕様書“書き戻し”ポリシー + 成果物を明示（Clarification禁止）
          cat >> "$PROMPT_FILE" <<'PRELUDE'
          # TASK（実装を即実行）
          - Clarification（質問・保留）を行わず、仕様の不足は合理的に補完して実装を完了する。
          - 出力はパッチ（ファイルの追加/更新）のみ。説明文は不要。
          - 生成先: `src/**`（アプリ本体）、`tests/**`（テスト）。必要に応じて `app.php`, `.htaccess`,
            `env-lite.php`, `health-lite.php`, `tools/`, `storage/`, `logs/` も作成可。
          - 1 回の実行でアプリとテスト一式を完成させる。既存は安全に上書き、無ければ新規作成。

          ## DELIVERABLES（必ず生成）
          - app.php
          - src/Kernel.php
          - src/Routing.php
          - src/Controllers/EnvLiteController.php
          - env-lite.php
          - health-lite.php
          - tests/Feature/EnvLiteTest.php   # 期待JSON {"ok":true,"kind":"env-lite"} を検証
          - ai/CHANGELOG_AI.md
          - （必要に応じて）tools/**, storage/**, logs/**

          # SPEC WRITE-BACK POLICY（仕様書に書き戻す）
          - 共通化できるルール／非機能・生成規約・テスト戦略は **spec/generation.txt** と **spec/testing.txt** に書き戻す。
          - 環境ごとの差分は **ENV_SPEC** に、機能ごとの差分は **FUNC_SPEC** に書き戻す。
          - 追記は各ファイル末尾に見出し「### AI Amendments (TODAY)」を新設して要点箇条書き、その後、本文へ統合（リライト）しても良い。
          - 書き戻しの結果、重複や矛盾があれば **共通 > 個別** の順で整理し、個別ファイルは共通を上書きする差分のみ残す。
          - 変更履歴は **ai/CHANGELOG_AI.md** に「What changed / Why / Affected files」を追加。
          PRELUDE

          # 置換（ENV_SPEC / FUNC_SPEC / TODAY）
          sed -i "s|ENV_SPEC|${{ steps.resolve.outputs.env || '(none)' }}|g" "$PROMPT_FILE"
          sed -i "s|FUNC_SPEC|${{ steps.resolve.outputs.func || '(none)' }}|g" "$PROMPT_FILE"
          sed -i "s|TODAY|$TODAY|g" "$PROMPT_FILE"

          # AGENTS.md を先頭に（任意）
          if [ -f "AGENTS.md" ]; then
            printf "\n\n---\n\n# AGENTS.md\n\n" >> "$PROMPT_FILE"
            sed -e 's/\r$//' "AGENTS.md" >> "$PROMPT_FILE"
          fi

          # 結合順：generation → testing → environment? → functional?
          printf "\n\n---\n\n# %s\n\n" "${{ steps.resolve.outputs.gen }}"  >> "$PROMPT_FILE"
          sed -e 's/\r$//' "${{ steps.resolve.outputs.gen }}"               >> "$PROMPT_FILE"

          printf "\n\n---\n\n# %s\n\n" "${{ steps.resolve.outputs.test }}" >> "$PROMPT_FILE"
          sed -e 's/\r$//' "${{ steps.resolve.outputs.test }}"              >> "$PROMPT_FILE"

          if [ -n "${{ steps.resolve.outputs.env }}" ]; then
            printf "\n\n---\n\n# %s\n\n" "${{ steps.resolve.outputs.env }}" >> "$PROMPT_FILE"
            sed -e 's/\r$//' "${{ steps.resolve.outputs.env }}"             >> "$PROMPT_FILE"
          fi

          if [ -n "${{ steps.resolve.outputs.func }}" ]; then
            printf "\n\n---\n\n# %s\n\n" "${{ steps.resolve.outputs.func }}" >> "$PROMPT_FILE"
            sed -e 's/\r$//' "${{ steps.resolve.outputs.func }}"             >> "$PROMPT_FILE"
          fi

          echo "file=$PROMPT_FILE" >> "$GITHUB_OUTPUT"

      - name: "Preflight: check OPENAI_API_KEY"
        env:
          OPENAI_API_KEY: "${{ secrets.OPENAI_API_KEY }}"
        shell: "bash"
        run: |
          set -eu
          if [ -z "${OPENAI_API_KEY:-}" ]; then
            echo "::error::OPENAI_API_KEY missing"; exit 1
          fi
          echo "OPENAI_API_KEY present"

      # 1回目の生成
      - name: "Run Codex (pass 1)"
        id: "codex1"
        uses: "openai/codex-action@main"
        env:
          OPENAI_API_KEY: "${{ secrets.OPENAI_API_KEY }}"
        with:
          openai-api-key: "${{ secrets.OPENAI_API_KEY }}"
          prompt-file: "${{ steps.prompt.outputs.file }}"
          model: "${{ github.event.inputs.model }}"
          sandbox: "workspace-write"

      - name: "Discard workflow edits (safety)"
        shell: "bash"
        run: |
          set -eu
          if git status --porcelain | grep -E '^[AMDR].*\.github/workflows/'; then
            echo "::warning::Discarding changes under .github/workflows/"
            git checkout -- ".github/workflows" || true
            git restore --staged ".github/workflows" || true
          fi

      # テスト検出
      - name: "Detect test runner"
        id: "detect_tests"
        shell: "bash"
        run: |
          set -euo pipefail
          TEST_CMD=""

          if [ -f "composer.json" ]; then
            sudo apt-get update -y && sudo apt-get install -y jq >/dev/null 2>&1 || true
            php -v || sudo apt-get install -y php-cli php-xml php-mbstring >/dev/null 2>&1 || true
            curl -sS https://getcomposer.org/installer | php -- --quiet
            php composer.phar install --no-interaction --no-progress || true
            if jq -e '.scripts.test' composer.json >/dev/null 2>&1; then TEST_CMD="php composer.phar test"; fi
            if [ -z "$TEST_CMD" ] && [ -f "vendor/bin/pest" ]; then TEST_CMD="vendor/bin/pest -q"; fi
            if [ -z "$TEST_CMD" ] && [ -f "vendor/bin/phpunit" ]; then TEST_CMD="vendor/bin/phpunit --colors=never"; fi
          fi

          if [ -z "$TEST_CMD" ] && [ -f "package.json" ]; then
            npm ci --prefer-offline --no-audit --no-fund || npm i
            if npx --yes jest --version >/dev/null 2>&1; then TEST_CMD="npx jest --ci"; fi
            if [ -z "$TEST_CMD" ] && npx --yes vitest --version >/dev/null 2>&1; then TEST_CMD="npx vitest run"; fi
          fi

          if [ -z "$TEST_CMD" ] && ls -1 tests 2>/dev/null | grep -E '\.py$|^test_' >/dev/null 2>&1; then
            python3 -V || sudo apt-get install -y python3 python3-pip >/dev/null 2>&1 || true
            [ -f "requirements.txt" ] && pip3 install -r requirements.txt || true
            pip3 install pytest >/dev/null 2>&1 || true
            TEST_CMD="pytest -q"
          fi

          if [ -z "$TEST_CMD" ] && ls -1 **/*_test.go 2>/dev/null | head -n1 >/dev/null; then
            sudo apt-get update -y && sudo apt-get install -y golang >/dev/null 2>&1 || true
            TEST_CMD="go test ./..."
          fi

          if [ -z "$TEST_CMD" ]; then
            echo "::warning::No test runner detected"
            echo "cmd=" >> "$GITHUB_OUTPUT"
          else
            echo "cmd=$TEST_CMD" >> "$GITHUB_OUTPUT"
          fi

      # パス1: テスト実行
      - name: "Run tests (pass 1)"
        if: ${{ steps.detect_tests.outputs.cmd != '' }}
        id: "t1"
        shell: "bash"
        continue-on-error: true
        run: |
          set -o pipefail
          mkdir -p .ci/reports
          bash -lc "${{ steps.detect_tests.outputs.cmd }}" | tee .ci/reports/test-pass1.log
          echo "exitcode=${PIPESTATUS[0]}" >> "$GITHUB_OUTPUT"

      # 失敗時の自己修復（最大 max_fixes 回）
      - name: "Self-fix with failing logs (pass 2)"
        if: ${{ steps.detect_tests.outputs.cmd != '' && steps.t1.outputs.exitcode != '0' && github.event.inputs.max_fixes != '0' }}
        id: "fix1"
        uses: "openai/codex-action@main"
        env:
          OPENAI_API_KEY: "${{ secrets.OPENAI_API_KEY }}"
        with:
          openai-api-key: "${{ secrets.OPENAI_API_KEY }}"
          prompt-file: "${{ steps.prompt.outputs.file }}"
          extra-input: |
            ## TEST FAILURES (pass 1)
            以下はテスト失敗ログの抜粋です。原因を修正し、必要なら仕様書にも書き戻してください。
            ```
            ${{ steps.detect_tests.outputs.cmd }}
            ---
            ${{ runner.temp }}/ignored  # 占位
            ```
          sandbox: "workspace-write"

      - name: "Run tests (pass 2 after fix)"
        if: ${{ steps.detect_tests.outputs.cmd != '' && steps.t1.outputs.exitcode != '0' && github.event.inputs.max_fixes != '0' }}
        id: "t2"
        shell: "bash"
        continue-on-error: true
        run: |
          set -o pipefail
          mkdir -p .ci/reports
          bash -lc "${{ steps.detect_tests.outputs.cmd }}" | tee .ci/reports/test-pass2.log
          echo "exitcode=${PIPESTATUS[0]}" >> "$GITHUB_OUTPUT"

      # .github/workflows の改変は捨てる
      - name: "Discard workflow edits (safety)"
        shell: "bash"
        run: |
          set -eu
          if git status --porcelain | grep -E '^[AMDR].*\.github/workflows/'; then
            echo "::warning::Discarding changes under .github/workflows/"
            git checkout -- ".github/workflows" || true
            git restore --staged ".github/workflows" || true
          fi

      - name: "Detect changes"
        id: "diff"
        shell: "bash"
        run: |
          set -eu
          if git diff --quiet; then
            echo "changed=false" >> "$GITHUB_OUTPUT"
            echo "No changes."
          else
            echo "changed=true" >> "$GITHUB_OUTPUT"
            echo "Changed files:"
            git diff --name-only || true
          fi

      - name: "Choose token (PAT > GITHUB_TOKEN)"
        id: "tok"
        shell: "bash"
        run: |
          if [ -n "${{ secrets.GH_PAT_WORKFLOWS }}" ]; then
            echo "val=${{ secrets.GH_PAT_WORKFLOWS }}" >> "$GITHUB_OUTPUT"
          else
            echo "val=${{ github.token }}" >> "$GITHUB_OUTPUT"
          fi

      - name: "Create Pull Request (only if changed)"
        if: ${{ steps.diff.outputs.changed == 'true' }}
        uses: "peter-evans/create-pull-request@v7"
        with:
          token: "${{ steps.tok.outputs.val }}"
          title: "AI: generate code, run tests, and write back specs"
          body: |
            Automated changes by Codex.

            Specs (common):
            - ${{ steps.resolve.outputs.gen }}
            - ${{ steps.resolve.outputs.test }}

            Specs (selected):
            - env:  ${{ steps.resolve.outputs.env || '(none)' }}
            - func: ${{ steps.resolve.outputs.func || '(none)' }}

            Includes code generation, test run, optional self-fix, and spec write-back.
          commit-message: "chore(ai): generate code + tests + spec write-back"
          branch: "ai/codex/batch-${{ github.run_id }}"
          base: "main"
          delete-branch: true
