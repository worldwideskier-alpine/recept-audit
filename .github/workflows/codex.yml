name: "Codex"

on:
  workflow_dispatch: {}

permissions:
  contents: "write"

defaults:
  run:
    shell: "bash"

jobs:
  generate:
    name: "Generate from specs (full → new branch)"
    runs-on: "ubuntu-24.04"

    env:
      SPEC_ROOT: "spec"
      SPEC_DIRS: "env foundation features tests"
      PROMPT_FILE: "ai/prompt.md"
      PATCH_FILE: "ai/patch.diff"
      FILES_JSON: "ai/files.json"
      OPENAI_MODEL: "gpt-5-codex"                 # 代替モデルへの切替はしない
      OPENAI_API_KEY: "${{ secrets.OPENAI_API_KEY }}"
      OPENAI_BASE_URL: "${{ secrets.OPENAI_BASE_URL }}"
      BRANCH_PREFIX: "codex/autogen"
      MAX_OUT_TOKENS: "12288"
      TEMPERATURE: "0"                            # モデルが非対応なら後段で自動的に「送らない」
      CURL_TIMEOUT: "300"
      CURL_RETRIES: "5"
      CURL_RETRY_DELAY: "5"

    steps:
      - name: "Checkout main"
        uses: "actions/checkout@v4"
        with:
          ref: "main"
          fetch-depth: "1"
          set-safe-directory: "true"

      - name: "Preflight"
        run: |
          set -euo pipefail
          if [ -z "${OPENAI_API_KEY:-}" ]; then
            echo "::error::OPENAI_API_KEY is not set"; exit 1
          fi
          mkdir -p ai
          command -v jq >/dev/null || (sudo apt-get update && sudo apt-get install -y jq)

      # ─────────────────────────────────────────────────────────────
      # モデルは固定のまま：どの API を使うか／temperature が送れるかだけ事前に判定
      # ─────────────────────────────────────────────────────────────
      - name: "Probe endpoint & features for this model"
        id: probe
        run: |
          set -euo pipefail
          BASE="${OPENAI_BASE_URL:-https://api.openai.com}"; BASE="${BASE%/}"
          MODEL="${OPENAI_MODEL}"

          mkdir -p ai
          echo "Base: $BASE  Model: $MODEL"

          # まず Responses で最小疎通（temperature なし）
          r_tmp="$(mktemp)"
          r_req='{"model":"'"$MODEL"'","input":[{"role":"user","content":[{"type":"input_text","text":"ping"}]}],"max_output_tokens":8}'
          curl -sS -w "\n%{http_code}\n" \
               -H "Authorization: Bearer ${OPENAI_API_KEY}" -H "Content-Type: application/json" \
               -d "$r_req" "$BASE/v1/responses" | tee "$r_tmp" >/dev/null
          r_code="$(tail -n1 "$r_tmp")"
          head -n -1 "$r_tmp" > ai/probe.responses.json || true
          rm -f "$r_tmp"

          # Chat でも最小疎通
          c_tmp="$(mktemp)"
          c_req='{"model":"'"$MODEL"'","max_tokens":8,"messages":[{"role":"system","content":"Reply with OK."},{"role":"user","content":"ping"}]}'
          curl -sS -w "\n%{http_code}\n" \
               -H "Authorization: Bearer ${OPENAI_API_KEY}" -H "Content-Type: application/json" \
               -d "$c_req" "$BASE/v1/chat/completions" | tee "$c_tmp" >/dev/null
          c_code="$(tail -n1 "$c_tmp")"
          head -n -1 "$c_tmp" > ai/probe.chat.json || true
          rm -f "$c_tmp"

          # どちらのエンドポイントを使うか決定（成功した方）。両方失敗なら Responses を既定にして続行。
          api="responses"
          if [ "$r_code" -lt 300 ] && [ "$c_code" -ge 300 ]; then api="responses"; fi
          if [ "$c_code" -lt 300 ] && [ "$r_code" -ge 300 ]; then api="chat"; fi
          if [ "$c_code" -lt 300 ] && [ "$r_code" -lt 300 ]; then api="responses"; fi

          # temperature の対応可否を判定（選ばれた API で、temperature を付けて試す）
          t_tmp="$(mktemp)"
          if [ "$api" = "responses" ]; then
            t_req='{"model":"'"$MODEL"'","input":[{"role":"user","content":[{"type":"input_text","text":"ping"}]}],"max_output_tokens":8,"temperature":0}'
            t_url="$BASE/v1/responses"
          else
            t_req='{"model":"'"$MODEL"'","max_tokens":8,"temperature":0,"messages":[{"role":"user","content":"ping"}]}'
            t_url="$BASE/v1/chat/completions"
          fi
          curl -sS -w "\n%{http_code}\n" \
               -H "Authorization: Bearer ${OPENAI_API_KEY}" -H "Content-Type: application/json" \
               -d "$t_req" "$t_url" | tee "$t_tmp" >/dev/null
          t_code="$(tail -n1 "$t_tmp")"
          head -n -1 "$t_tmp" > ai/probe.temperature.json || true
          rm -f "$t_tmp"

          allow_temp=1
          if [ "$t_code" -ge 300 ] && command -v jq >/dev/null 2>&1; then
            msg="$(jq -r '.error?.message // empty' ai/probe.temperature.json)"
            case "$msg" in
              *"Unsupported parameter"*temperature* ) allow_temp=0 ;;
            esac
            [ -n "$msg" ] && echo "::notice::temperature probe: $msg"
          fi

          echo "base=$BASE"            >> "$GITHUB_OUTPUT"
          echo "api=$api"              >> "$GITHUB_OUTPUT"
          echo "allow_temp=$allow_temp">> "$GITHUB_OUTPUT"
          echo "model=$MODEL"          >> "$GITHUB_OUTPUT"
          echo "API decided: $api  (temperature allowed: $allow_temp)"

      - name: "Compose prompt (FULL from specs)"
        id: compose
        run: |
          set -euo pipefail
          : > "ai/allowed_paths.txt"
          : > "$PROMPT_FILE"

          # 言語ヒント抽出
          LANG_HINT=""
          for root in "${SPEC_ROOT}/env" "${SPEC_ROOT}/foundation" "${SPEC_ROOT}/features" "${SPEC_ROOT}"; do
            [ -d "$root" ] || continue
            hit="$(grep -R -n -i -E "^\s*(language|runtime\.language|lang|stack\.language|runtime)\s*[:=]\s*" "$root" 2>/dev/null | head -n1 || true)"
            if [ -n "$hit" ]; then
              LANG_HINT="$(printf "%s" "$hit" | sed -E "s/.*[:=]\s*//; s/[\",]//g; s/\s+$//;" | tr "A-Z" "a-z")"
              break
            fi
          done
          case "${LANG_HINT:-}" in
            php*|composer*|psr*) LANG_HINT="php" ;;
            ts|typescript*|node*|javascript*) LANG_HINT="typescript" ;;
            py|python*)          LANG_HINT="python" ;;
            go|golang*)          LANG_HINT="go" ;;
            ruby*)               LANG_HINT="ruby" ;;
            java*)               LANG_HINT="java" ;;
            c#|dotnet*|.net*|cs) LANG_HINT="csharp" ;;
            "" )                 LANG_HINT="auto" ;;
          esac
          echo "Language from specs: ${LANG_HINT}"

          # ALLOWED_PATHS 抽出
          grep -R -n -E "(^|\s)(file|path|destination|output|生成先|出力先)\s*:\s*([A-Za-z0-9_./-]+\.[A-Za-z0-9]+)" "$SPEC_ROOT" \
            | sed -E "s/.*:\s*//; s/[\"']//g" \
            | grep -E "[/A-Za-z0-9_.-]+\.[A-Za-z0-9]+" >> "ai/allowed_paths.txt" || true
          grep -R -h -E "[/A-Za-z0-9_.-]+\.(php|ts|tsx|js|jsx|py|rb|go|java|cs|sql|html|css|yml|yaml|json|ini|xml)" "$SPEC_ROOT" \
            | grep -o -E "[/A-Za-z0-9_.-]+\.(php|ts|tsx|js|jsx|py|rb|go|java|cs|sql|html|css|yml|yaml|json|ini|xml)" >> "ai/allowed_paths.txt" || true
          grep -R -h -E "(^|\s)(dir|directory|folder|ディレクトリ)\s*:\s*[A-Za-z0-9_./-]+/?" "$SPEC_ROOT" \
            | sed -E "s/.*:\s*//; s/[\"']//g" | awk '{gsub(/\/?$/,"/");print}' >> "ai/allowed_paths.txt" || true
          sed -E "s#^\./##; s#//+#/#g" -i "ai/allowed_paths.txt" || true
          LC_ALL=C sort -u "ai/allowed_paths.txt" -o "ai/allowed_paths.txt"

          # プロンプト
          {
            printf "# Codex generation prompt\n\n"
            printf "## LANGUAGE (MUST)\n\nlanguage: %s\n" "$LANG_HINT"
            printf "\n## ALLOWED_PATHS (only modify/create under these; NEVER touch ai/)\n\n"
            if [ -s "ai/allowed_paths.txt" ]; then
              while IFS= read -r line; do printf -- "- %s\n" "$line"; done < "ai/allowed_paths.txt"
            else
              case "$LANG_HINT" in
                php)        printf -- "- app.php\n- public/\n- src/\n- tests/\n- composer.json\n" ;;
                typescript) printf -- "- src/\n- app/\n- package.json\n- tsconfig.json\n- vite.config.*\n" ;;
                python)     printf -- "- src/\n- app/\n- requirements.txt\n- pyproject.toml\n" ;;
                *)          printf -- "- /\n" ;;
              esac
              printf "\nDo NOT modify ai/ directory.\n"
            fi
            printf "\n## Example header (force unified diff)\n\ndiff --git a/app.php b/app.php\n"
            printf "\n## STRICT OUTPUT RULES\n\n"
            printf -- "- Output ONE Git unified diff (UTF-8). No prose, no code fences.\n"
            printf -- "- MUST start with: diff --git a/<path> b/<path>\n"
            printf -- "- Follow LANGUAGE; respect ALLOWED_PATHS strictly.\n"
            printf -- "- Include real code (no placeholders). If initial attempt fails, still SYNTHESIZE a complete diff that fulfills the specs.\n"
          } >> "$PROMPT_FILE"

          # 仕様書を連結
          tmp_list="$(mktemp)"
          for d in $SPEC_DIRS; do
            [ -d "${SPEC_ROOT}/${d}" ] || continue
            find "${SPEC_ROOT}/${d}" -type f \( -name "*.md" -o -name "*.txt" -o -name "*.yaml" -o -name "*.yml" -o -name "*.json" \) >> "$tmp_list"
          done
          LC_ALL=C sort -o "$tmp_list" "$tmp_list" || true
          while IFS= read -r f; do
            printf "\n### %s\n\n" "$f" >> "$PROMPT_FILE"
            sed -e "s/\r$//" "$f" | head -n 4000 >> "$PROMPT_FILE"
          done < "$tmp_list"
          rm -f "$tmp_list"

      - name: "Generate unified diff, commit to new branch, push"
        id: gen
        run: |
          set -euo pipefail
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          MODEL="${OPENAI_MODEL}"                                          # モデル固定（代替しない）
          BASE="${{ steps.probe.outputs.base || env.OPENAI_BASE_URL }}"
          BASE="${BASE:-https://api.openai.com}"; BASE="${BASE%/}"
          API_KIND="${{ steps.probe.outputs.api }}"
          ALLOW_TEMPERATURE="${{ steps.probe.outputs.allow_temp }}"
          [ -z "$API_KIND" ] && API_KIND="responses"
          [ -z "$ALLOW_TEMPERATURE" ] && ALLOW_TEMPERATURE=0               # 安全側：送らない

          if [ "$API_KIND" = "chat" ]; then
            ENDPOINT="${BASE}/v1/chat/completions"
          else
            ENDPOINT="${BASE}/v1/responses"
          fi

          BRANCH_NAME="${BRANCH_PREFIX}-${GITHUB_RUN_ID}"
          git checkout -b "${BRANCH_NAME}"

          # 抽出 jq
          cat > "ai/extract.jq" << 'JQ'
          def texts:
            (try(.output_text) // empty),
            (try(.output[]?.content[]?.text) // empty),
            (try(.choices[0].message.content) // empty),
            (try(.choices[0].text) // empty);
          [ texts ] | map(select(type=="string" and . != "")) | first // ""
          JQ

          # リクエスト生成（API 種／temperature 可否で JSON 切替）
          gen_req() {
            local system_text="$1"
            local user_file="$2"
            local out_file="$3"
            if [ "$API_KIND" = "chat" ]; then
              if [ "$ALLOW_TEMPERATURE" -eq 1 ]; then
                jq -n --arg model "$MODEL" --arg max "$MAX_OUT_TOKENS" --arg temp "$TEMPERATURE" \
                      --arg sys "$system_text" --rawfile prompt "$user_file" \
                  '{ "model":$model, "max_tokens":($max|tonumber), "temperature":($temp|tonumber),
                     "messages":[{"role":"system","content":$sys},{"role":"user","content":$prompt}] }' > "$out_file"
              else
                jq -n --arg model "$MODEL" --arg max "$MAX_OUT_TOKENS" \
                      --arg sys "$system_text" --rawfile prompt "$user_file" \
                  '{ "model":$model, "max_tokens":($max|tonumber),
                     "messages":[{"role":"system","content":$sys},{"role":"user","content":$prompt}] }' > "$out_file"
              fi
            else
              if [ "$ALLOW_TEMPERATURE" -eq 1 ]; then
                jq -n --arg model "$MODEL" --arg max "$MAX_OUT_TOKENS" --arg temp "$TEMPERATURE" \
                      --arg sys "$system_text" --rawfile prompt "$user_file" \
                  '{ "model":$model, "max_output_tokens":($max|tonumber), "temperature":($temp|tonumber),
                     "input":[ {"role":"system","content":[{"type":"input_text","text":$sys}]},
                               {"role":"user","content":[{"type":"input_text","text":$prompt}]} ] }' > "$out_file"
              else
                jq -n --arg model "$MODEL" --arg max "$MAX_OUT_TOKENS" \
                      --arg sys "$system_text" --rawfile prompt "$user_file" \
                  '{ "model":$model, "max_output_tokens":($max|tonumber),
                     "input":[ {"role":"system","content":[{"type":"input_text","text":$sys}]},
                               {"role":"user","content":[{"type":"input_text","text":$prompt}]} ] }' > "$out_file"
              fi
            fi
          }

          call_api_with_retry() {
            # $1: request.json  $2: response.json
            local req="$1"; local out="$2"
            local attempt=1
            while [ $attempt -le 3 ]; do
              local tmp="$(mktemp)"
              curl -sS --connect-timeout 30 --max-time "$CURL_TIMEOUT" \
                   --retry "$CURL_RETRIES" --retry-all-errors --retry-delay "$CURL_RETRY_DELAY" \
                   -H "Authorization: Bearer ${OPENAI_API_KEY}" -H "Content-Type: application/json" \
                   -w "\n%{http_code}\n" -d @"$req" "$ENDPOINT" | tee "$tmp" >/dev/null
              local status; status="$(tail -n1 "$tmp")"
              head -n -1 "$tmp" > "$out"; rm -f "$tmp"

              if [ "$status" -lt 300 ]; then return 0; fi

              local msg=""
              if command -v jq >/dev/null 2>&1; then msg="$(jq -r '.error?.message // empty' "$out")"; fi
              [ -n "$msg" ] && echo "::notice::API error $status: $msg"

              case "$status" in
                408|429|500|502|503|504)
                  echo "::warning::transient ${status}; shrinking tokens and retrying"
                  MAX_OUT_TOKENS=$(( MAX_OUT_TOKENS / 2 )); [ "$MAX_OUT_TOKENS" -lt 4096 ] && MAX_OUT_TOKENS=4096
                  attempt=$((attempt+1)); return 1 ;;
                400)
                  # モデル固定。エンドポイントは切り替えない。
                  case "$msg" in
                    *"Unsupported parameter"*temperature* )
                      if [ "$ALLOW_TEMPERATURE" -ne 0 ]; then
                        echo "::warning::disabling temperature for this model"
                        ALLOW_TEMPERATURE=0
                        return 1
                      fi ;;
                    *"only supported in v1/responses"* )
                      API_KIND="responses"; ENDPOINT="${BASE}/v1/responses"; return 1 ;;
                    *"only supported in v1/chat/completions"* )
                      API_KIND="chat"; ENDPOINT="${BASE}/v1/chat/completions"; return 1 ;;
                  esac
                  echo "::error::fatal 400 for this model/endpoint"; return 2 ;;
                *)
                  echo "::error::fatal ${status}"; return 2 ;;
              esac
            done
            echo "::error::repeated transient failures"; return 2
          }

          # 生成開始（diff 指示）
          system1=$'Output ONLY a Git unified diff.\nMUST start with: diff --git a/<path> b/<path>\nNo prose or fences.'
          gen_req "$system1" "$PROMPT_FILE" "ai/request.json"
          for _ in 1 2 3; do
            if call_api_with_retry "ai/request.json" "ai/response.json"; then break
            else gen_req "$system1" "$PROMPT_FILE" "ai/request.json"; fi
          done

          jq -r -f "ai/extract.jq" "ai/response.json" > "ai/out.txt"
          sed -E -e '1{/^```[a-zA-Z-]*[[:space:]]*$/d;}' -e '${/^```[[:space:]]*$/d;}' -i "ai/out.txt" || true
          awk 'f||/^(diff --git|--- a\/|\*\*\* |Index: )/{f=1; print}' "ai/out.txt" > "$PATCH_FILE" || true

          is_unified=0
          if grep -Eq "^(diff --git|--- (a\/|\/dev\/null)|Index: |\*\*\* )" "$PATCH_FILE" \
             && grep -Eq "(\+\+\+ b\/|^diff --git|^--- b\/)" "$PATCH_FILE"; then
            is_unified=1
          fi

          # repair（2回）
          if [ "$is_unified" -ne 1 ]; then
            echo "::warning::first attempt not a unified diff; repairing"
            system2=$'Output ONLY a Git unified diff.\nMUST start with: diff --git a/<path> b/<path>\nNo prose or fences.'
            for i in 1 2; do
              gen_req "$system2" "$PROMPT_FILE" "ai/request.repair.json"
              for _ in 1 2 3; do
                if call_api_with_retry "ai/request.repair.json" "ai/response.repair.json"; then break
                else gen_req "$system2" "$PROMPT_FILE" "ai/request.repair.json"; fi
              done
              jq -r -f "ai/extract.jq" "ai/response.repair.json" > "ai/out.repair.txt"
              sed -E -e '1{/^```[a-zA-Z-]*[[:space:]]*$/d;}' -e '${/^```[[:space:]]*$/d;}' -i "ai/out.repair.txt" || true
              awk 'f||/^(diff --git|--- a\/|\*\*\* |Index: )/{f=1; print}' "ai/out.repair.txt" > "$PATCH_FILE" || true
              if grep -Eq "^(diff --git|--- (a\/|\/dev\/null)|Index: |\*\*\* )" "$PATCH_FILE" \
                 && grep -Eq "(\+\+\+ b\/|^diff --git|^--- b\/)" "$PATCH_FILE"; then
                is_unified=1; break
              fi
            done
          fi

          # diff 適用
          if [ "$is_unified" -eq 1 ]; then
            if git apply --check "$PATCH_FILE"; then
              git apply --index --whitespace=fix "$PATCH_FILE"
            else
              echo "::warning::git apply check failed; attempting 3-way merge"
              git apply --3way --index --whitespace=fix "$PATCH_FILE" || true
            fi
          fi

          # files-JSON フォールバック
          if ! git diff --cached --name-only | grep -q "."; then
            echo "::warning::No staged changes after diff path; switching to files-JSON fallback"
            system3=$'Output ONLY a compact JSON with exact key `files`: [{ "path": "relative/path", "content": "UTF-8 file content" }, ...]. No prose, no markdown, no trailing text.'
            gen_req "$system3" "$PROMPT_FILE" "ai/request.files.json"
            for _ in 1 2 3; do
              if call_api_with_retry "ai/request.files.json" "ai/response.files.json"; then break
              else gen_req "$system3" "$PROMPT_FILE" "ai/request.files.json"; fi
            done

            jq 'try(.files) // empty' "ai/response.files.json" > "$FILES_JSON"
            if [ ! -s "$FILES_JSON" ] || ! jq -e 'type=="array" and length>0 and all(.[]; has("path") and has("content"))' "$FILES_JSON" >/dev/null; then
              echo "::error::Model did not return valid files JSON"; exit 7
            fi

            allow_all=0
            if [ -s "ai/allowed_paths.txt" ]; then mapfile -t ALLOWED < "ai/allowed_paths.txt"; else allow_all=1; fi
            jq -r '.[] | @base64' "$FILES_JSON" | while read -r row; do
              _jq(){ echo "$row" | base64 -d | jq -r "$1"; }
              p="$(_jq '.path')"; c="$(_jq '.content')"
              if printf "%s" "$p" | grep -q '^ai/'; then echo "::warning::skip ai/: $p"; continue; fi
              ok="$allow_all"
              if [ "$allow_all" -ne 1 ]; then
                for pat in "${ALLOWED[@]}"; do
                  if [ "${p#"$pat"}" != "$p" ] || [ "$p" = "$pat" ]; then ok=1; break; fi
                done
              fi
              [ "$ok" -ne 1 ] && { echo "::warning::skip (not allowed): $p"; continue; }
              mkdir -p "$(dirname "$p")"; printf "%s" "$c" > "$p"; git add "$p"
            done
          fi

          if ! git diff --cached --name-only | grep -q "."; then
            echo "::error::No changes staged after all paths"; exit 6
          fi

          git commit -m "codex(full): generated from specs via ${MODEL}"
          git push origin "HEAD:${BRANCH_NAME}"
          echo "branch=${BRANCH_NAME}" >> "$GITHUB_OUTPUT"

      - name: "Upload AI artifacts"
        uses: "actions/upload-artifact@v4"
        with:
          name: "ai-artifacts"
          if-no-files-found: "ignore"
          path: |
            ai/probe.responses.json
            ai/probe.chat.json
            ai/probe.temperature.json
            ai/prompt.md
            ai/allowed_paths.txt
            ai/request.json
            ai/response.json
            ai/out.txt
            ai/request.repair.json
            ai/response.repair.json
            ai/out.repair.txt
            ai/patch.diff
            ai/request.files.json
            ai/response.files.json
            ai/files.json
