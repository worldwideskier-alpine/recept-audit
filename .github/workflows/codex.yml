name: "Codex Generate & PR (+ auto cleanup)"

on:
  push:
    branches: ["**"]
    paths: ["spec/**", "AGENTS.md"]
  pull_request:
    paths: ["spec/**", "AGENTS.md"]
  workflow_dispatch:
    inputs:
      model:
        description: "（任意）モデル名（未指定＝既定）"
        required: false
  pull_request_target:
    types: ["closed"]

permissions:
  contents: write
  pull-requests: write

concurrency:
  group: "codex-${{ github.ref }}"
  cancel-in-progress: false

jobs:
  generate:
    if: ${{ github.event_name != 'pull_request_target' }}
    runs-on: "ubuntu-latest"

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v4"
        with:
          fetch-depth: 0

      - name: "Set Git identity (CI)"
        shell: "bash"
        run: |
          set -eu
          git config --global user.email "ci-bot@example.invalid"
          git config --global user.name  "CI Bot"
          git config --global --add safe.directory "$GITHUB_WORKSPACE"

      - name: "Assert required specs exist"
        shell: "bash"
        run: |
          set -euo pipefail
          for f in spec/generation.txt spec/testing.txt spec/environment.txt spec/functional.txt; do
            [ -f "$f" ] || { echo "::error::Missing spec: $f"; exit 1; }
          done

      - name: "Build composite prompt"
        id: "prompt"
        shell: "bash"
        run: |
          set -euo pipefail
          PROMPT_FILE="$RUNNER_TEMP/prompt.md"
          : > "$PROMPT_FILE"

          cat >> "$PROMPT_FILE" <<'PRELUDE'
          # TASK
          - Clarification（質問・保留）を行わず即実装する。
          - 出力はパッチ（ファイル追加/更新）のみ。説明文は不要。
          - 生成先: `src/**`（本体）, `tests/**`（テスト）, ルートに `app.php`, `.htaccess`, `env-lite.php`, `health-lite.php` を必要に応じて作成可。

          ## DELIVERABLES
          - app.php
          - src/**
          - tests/**
          PRELUDE

          if [ -f "AGENTS.md" ]; then
            printf "\n\n---\n\n# AGENTS.md\n\n" >> "$PROMPT_FILE"
            sed -e 's/\r$//' "AGENTS.md" >> "$PROMPT_FILE"
          fi

          for f in spec/generation.txt spec/testing.txt spec/environment.txt spec/functional.txt; do
            printf "\n\n---\n\n# %s\n\n" "$f" >> "$PROMPT_FILE"
            sed -e 's/\r$//' "$f" >> "$PROMPT_FILE"
          done

          echo "file=$PROMPT_FILE" >> "$GITHUB_OUTPUT"

      - name: "Preflight: OPENAI_API_KEY"
        env:
          OPENAI_API_KEY: "${{ secrets.OPENAI_API_KEY }}"
        shell: "bash"
        run: |
          set -eu
          [ -n "${OPENAI_API_KEY:-}" ] || { echo "::error::OPENAI_API_KEY missing"; exit 1; }
          echo "OPENAI_API_KEY present"

      - name: "Run Codex"
        id: "codex"
        uses: "openai/codex-action@main"
        env:
          OPENAI_API_KEY: "${{ secrets.OPENAI_API_KEY }}"
        with:
          openai-api-key: "${{ secrets.OPENAI_API_KEY }}"
          prompt-file: "${{ steps.prompt.outputs.file }}"
          model: "${{ github.event.inputs.model }}"
          sandbox: "workspace-write"

      - name: "Discard workflow edits (safety)"
        shell: "bash"
        run: |
          set -eu
          if git status --porcelain | grep -E '^[AMDR].*\.github/workflows/'; then
            echo "::warning::Discarding .github/workflows changes"
            git checkout -- ".github/workflows" || true
            git restore --staged ".github/workflows" || true
          fi

      - name: "Stage & maybe commit"
        id: "stage"
        shell: "bash"
        run: |
          set -euo pipefail
          # 余計な fatal を避けるため、グロブではなく -A を使う
          git add -A
          if git diff --cached --quiet; then
            echo "changed=false" >> "$GITHUB_OUTPUT"
            echo "No staged changes."
            exit 0
          fi
          git commit -m "chore(ai): apply Codex changes"
          echo "changed=true" >> "$GITHUB_OUTPUT"

      - name: "Create Pull Request (only when changed)"
        if: ${{ steps.stage.outputs.changed == 'true' }}
        uses: "peter-evans/create-pull-request@v7"
        with:
          token: "${{ github.token }}"
          title: "AI: apply Codex changes"
          body: "Automated changes generated by Codex from combined specs."
          commit-message: "chore(ai): apply Codex changes"
          branch: "ai/codex/batch-${{ github.run_id }}"
          base: "main"
          delete-branch: true

  cleanup_branch:
    name: "Delete ai/codex/batch-* after merge"
    if: ${{ github.event_name == 'pull_request_target' && github.event.action == 'closed' }}
    runs-on: "ubuntu-latest"
    permissions:
      contents: write

    steps:
      - name: "Guard: require PR payload"
        shell: "bash"
        run: |
          set -eu
          [ -n "${{ github.event.pull_request.number }}" ] || { echo "No PR payload. Skip."; exit 78; }

      - name: "Delete head branch via API (only when merged & own repo & ai/codex/batch-*)"
        uses: "actions/github-script@v7"
        with:
          script: |
            const pr = context.payload.pull_request;
            if (!pr) {
              core.notice("No PR in payload; skip.");
              return;
            }
            if (!pr.merged) {
              core.notice("PR is closed but not merged; skip.");
              return;
            }
            const sameRepo = pr.head.repo.full_name === context.repo.owner + "/" + context.repo.repo;
            if (!sameRepo) {
              core.notice("Head branch is from fork; skip.");
              return;
            }
            const headRef = pr.head.ref; // e.g. ai/codex/batch-123
            if (!headRef.startsWith("ai/codex/batch-")) {
              core.notice(`Head ref ${headRef} does not match ai/codex/batch-*; skip.`);
              return;
            }
            const ref = `heads/${headRef}`;
            core.info(`Deleting ref ${ref} ...`);
            try {
              await github.rest.git.deleteRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref
              });
              core.info(`Deleted ${ref}`);
            } catch (e) {
              // すでに削除済み・保護などは通知だけ
              core.warning(`Delete ref failed: ${e.message}`);
            }
