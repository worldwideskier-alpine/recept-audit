name: "Codex"

on:
  workflow_dispatch:
    inputs:
      mode:
        description: "実行モード: full(全生成) / incremental(差分)"
        required: false
        default: "full"
        type: choice
        options: ["full", "incremental"]
      model:
        description: "OpenAI モデル名 (例: gpt-5-codex / gpt-5 / gpt-4.1 / gpt-4o-mini)"
        required: false
        default: ""
        type: string

  push:
    branches: ["main"]
    paths:
      - "spec/**"

permissions:
  contents: write
  pull-requests: write

jobs:
  generate:
    if: ${{ github.event_name != 'push' || !contains(github.event.head_commit.message, '[skip-codex]') }}
    runs-on: ubuntu-latest

    env:
      SPEC_ROOT: "spec"
      SPEC_DIRS: "foundation env-profiles features tests"
      PROMPT_FILE: "ai/prompt.md"
      PATCH_FILE: "ai/patch.diff"
      MODEL_DEFAULT: "gpt-4o-mini"
      OPENAI_MODEL: "${{ inputs.model }}"
      MODE: "${{ inputs.mode }}"
      OPENAI_API_KEY: "${{ secrets.OPENAI_API_KEY }}"
      OPENAI_BASE_URL: "${{ vars.OPENAI_BASE_URL }}"
      GEN_OUTPUT_DIR: "generated"

    steps:
      - name: "Checkout"
        uses: actions/checkout@v4

      - name: "Setup Node (cache if lock exists)"
        if: ${{ hashFiles('**/package-lock.json', '**/npm-shrinkwrap.json', '**/yarn.lock') != '' }}
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: "Setup Node (no cache)"
        if: ${{ hashFiles('**/package-lock.json', '**/npm-shrinkwrap.json', '**/yarn.lock') == '' }}
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: "Preflight: API key"
        shell: bash
        run: |
          set -euo pipefail
          if [ -z "${OPENAI_API_KEY:-}" ]; then
            echo "::error::OPENAI_API_KEY is not set"
            exit 1
          fi
          mkdir -p ai "${GEN_OUTPUT_DIR}"

      - name: "Compose prompt from spec (no-heredoc)"
        shell: bash
        run: |
          set -euo pipefail
          : > "$PROMPT_FILE"
          printf "%s\n" "# Codex generation prompt" >> "$PROMPT_FILE"
          printf "%s\n" "" >> "$PROMPT_FILE"
          printf "%s\n" "## Mode: ${MODE}" >> "$PROMPT_FILE"
          printf "%s\n" "" >> "$PROMPT_FILE"

          tmp_list="$(mktemp)"
          if [ "${MODE:-full}" = "incremental" ]; then
            git fetch --depth=50 origin || true
            git diff --name-only --diff-filter=AMR origin/main...HEAD -- "${SPEC_ROOT}/" \
              | grep -E '\.(md|txt|ya?ml|json)$' >> "$tmp_list" || true
          fi
          if [ ! -s "$tmp_list" ]; then
            for d in $SPEC_DIRS; do
              if [ -d "${SPEC_ROOT}/${d}" ]; then
                find "${SPEC_ROOT}/${d}" -type f \
                  \( -name "*.md" -o -name "*.txt" -o -name "*.yaml" -o -name "*.yml" -o -name "*.json" \) \
                  >> "$tmp_list"
              fi
            done
          fi

          if [ -s "$tmp_list" ]; then
            LC_ALL=C sort "$tmp_list" -o "$tmp_list"
            while IFS= read -r f; do
              printf "%s\n" "" >> "$PROMPT_FILE"
              printf "%s\n" "### $(basename "$f")" >> "$PROMPT_FILE"
              printf "%s\n" "" >> "$PROMPT_FILE"
              sed -e 's/\r$//' "$f" >> "$PROMPT_FILE"
              printf "%s\n" "" >> "$PROMPT_FILE"
            done < "$tmp_list"
          fi
          rm -f "$tmp_list"

          {
            printf "\n## TASK CONTRACT (MUST)\n\n"
            printf -- "- Read the specs above and *generate implementation code* and/or *tests*.\n"
            printf -- "- You MUST produce at least one file change.\n"
            printf -- "- Default output location is '%s/'. Create new files there unless the spec explicitly maps to existing paths.\n" "${GEN_OUTPUT_DIR}"
            printf -- "- Prefer TypeScript/Node.js 20 if language is not specified; otherwise follow the spec.\n"
            printf -- "- If information is missing, generate a best-effort scaffold with TODO comments.\n"
          } >> "$PROMPT_FILE"

          {
            printf "\n## OUTPUT CONTRACT (STRICT)\n\n"
            printf -- "- Return a single Unified Diff patch rooted at the repository.\n"
            printf -- "- No prose, no explanations, no code fences, no headings.\n"
            printf -- "- Begin with 'diff --git' or with '--- a/' then '+++ b/'.\n"
            printf -- "- DO NOT return a no-op. If unsure, synthesize a minimal scaffold under '%s/'.\n" "${GEN_OUTPUT_DIR}"
          } >> "$PROMPT_FILE"

      - name: "Call OpenAI (curl + jq, no heredoc) — auto route with retry"
        id: call
        shell: bash
        run: |
          set -euo pipefail

          is_patch() { grep -Eq '^(diff --git|--- a/)' "$1" && grep -Eq '(^\+\+\+ b/|^diff --git)' "$1"; }

          # パッチ合成ヘルパ（作業ツリーにファイルを先書きしない）
          synth_patch_from_text () {
            local target_rel="$1"   # 例: generated/README.generated.md
            shift
            local tmp="ai/_scaffold.$$"
            if [ "$#" -eq 0 ]; then
              {
                printf "%s\n" "# Generated Scaffold"
                printf "%s\n" ""
                printf "%s\n" "- This file is created because the model did not return a diff."
                printf "%s\n" "- TODO: replace with real implementation based on specs."
              } > "$tmp"
            else
              printf "%s\n" "$@" > "$tmp"
            fi
            local lines; lines="$(wc -l < "$tmp" | tr -d ' ')"
            : > "$PATCH_FILE"
            printf "%s\n" "--- /dev/null" >> "$PATCH_FILE"
            printf "%s\n" "+++ b/${target_rel}" >> "$PATCH_FILE"
            printf "%s%s%s\n" "@@ -0,0 +" "${lines}" " @@" >> "$PATCH_FILE"
            sed 's/^/+ /' "$tmp" >> "$PATCH_FILE"
            rm -f "$tmp"
          }

          _in="${OPENAI_MODEL:-}"
          MODEL="$MODEL_DEFAULT"
          if [ -n "$_in" ]; then
            case "$_in" in gpt-*|o* ) MODEL="$_in" ;; * ) echo "note: unknown model '$_in' -> fallback to $MODEL_DEFAULT" ;; esac
          fi
          BASE="${OPENAI_BASE_URL:-https://api.openai.com}"
          echo "Using model: $MODEL"
          echo "Base URL  : $BASE"

          SYSTEM_CONTRACT=$'You are a patch generator. Always output a unified diff (UTF-8) rooted at repository with at least one file changed. Default output directory is '"${GEN_OUTPUT_DIR}"$'/ . Do not return a no-op. If spec is ambiguous, generate a minimal scaffold under that directory with TODO comments. No prose, no code fences.'

          # リクエスト（Responses では temperature を送らない）
          if printf "%s" "$MO
