name: "Codex Generate (reusable)"

on:
  workflow_call:
    inputs:
      mode:
        description: "実行モード: full(完全生成) / incremental(差分)"
        required: false
        type: string
        default: "full"
      model:
        description: "使用する OpenAI モデル名（未指定なら既定）"
        required: false
        type: string
        default: ""
    secrets:
      OPENAI_API_KEY:
        required: true
      GH_PAT_WORKFLOWS:
        required: false

permissions:
  contents: write
  pull-requests: write

concurrency:
  group: "codex-${{ github.ref }}"
  cancel-in-progress: false

env:
  # 仕様書の一覧（行区切り）
  SPEC_FILES: |
    spec/generation.txt
    spec/testing.txt
    spec/environment.txt
    spec/functional.txt
  # 生成を許可するパス
  ALLOWED_GLOBS: |
    src/**
    tests/**
    tools/**
    storage/**/*
    logs/**/*
    app.php
    env-lite.php
    health-lite.php
    .htaccess
    ai/CHANGELOG_AI.md

jobs:
  generate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"

      - name: Prepare dirs
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p ai defects logs storage src tests tools
          : > ai/prompt.combined.md

      # ---------- Pass 0: ベースプロンプト合成 ----------
      - name: Compose prompt (pass 0)
        shell: bash
        run: |
          set -euo pipefail
          if [ -f ai/prompt.md ]; then
            cat ai/prompt.md > ai/prompt.combined.md
          fi
          # 追加の注意書きなどがあればここで追記可能
          true

      - name: Run Codex (pass 0)
        uses: openai/codex-action@main
        with:
          openai-api-key: "${{ secrets.OPENAI_API_KEY }}"
          prompt-file: "ai/prompt.combined.md"
          model: "${{ inputs.model != '' && inputs.model || 'gpt-4.1' }}"
          sandbox: "workspace-write"
        env:
          SPEC_FILES: "${{ env.SPEC_FILES }}"

      # ---------- Validate requires (pass 1) ----------
      - name: Validate requires (pass 1)
        id: validate1
        shell: bash
        run: |
          set -euo pipefail
          MISSING=()
          mapfile -t PHP_FILES < <(git ls-files -- '*.php' || true)
          for f in "${PHP_FILES[@]}"; do
            while IFS= read -r req_path; do
              [ -z "$req_path" ] && continue
              case "$req_path" in /*) continue ;; esac
              base_dir=$(dirname "$f")
              target=$(python3 -c "import os,sys;print(os.path.normpath(os.path.join(sys.argv[1], sys.argv[2])))" \
                       "$base_dir" "$req_path")
              [ -f "$target" ] || MISSING+=("$(realpath --relative-to='.' "$target" 2>/dev/null || echo "$target")  # required by $f")
            done < <(php -r '$c=file_get_contents($argv[1]); if(preg_match_all("/\\b(require|require_once|include|include_once)\\s*\\(?[\\\"\\\']([^\\\"\\\']+)/", $c, $m)){foreach($m[2] as $p){echo $p, PHP_EOL;}}' "$f")
          done
          if [ ${#MISSING[@]} -gt 0 ]; then
            mkdir -p ai/defects
            { echo "### Create these files with implementations:"; printf -- "- %s\n" "${MISSING[@]}"; } > ai/defects/missing-requires.txt
            echo "missing=true" >> "$GITHUB_OUTPUT"
          else
            echo "missing=false" >> "$GITHUB_OUTPUT"
          fi

      # ---------- Pass 1: 欠落ファイルの生成を促す ----------
      - name: Compose prompt (pass 1 - with missing list)
        if: steps.validate1.outputs.missing == 'true'
        shell: bash
        run: |
          set -euo pipefail
          : > ai/prompt.combined.md
          [ -f ai/prompt.md ] && cat ai/prompt.md >> ai/prompt.combined.md
          if [ -f ai/defects/missing-requires.txt ]; then
            {
              echo
              echo "## Missing required PHP files"
              cat ai/defects/missing-requires.txt
            } >> ai/prompt.combined.md
          fi

      - name: Run Codex (pass 1)
        if: steps.validate1.outputs.missing == 'true'
        uses: openai/codex-action@main
        with:
          openai-api-key: "${{ secrets.OPENAI_API_KEY }}"
          prompt-file: "ai/prompt.combined.md"
          model: "${{ inputs.model != '' && inputs.model || 'gpt-4.1' }}"
          sandbox: "workspace-write"
        env:
          SPEC_FILES: "${{ env.SPEC_FILES }}"

      # ---------- Validate requires (pass 2) ----------
      - name: Re-validate requires (pass 2)
        if: steps.validate1.outputs.missing == 'true'
        id: validate2
        shell: bash
        run: |
          set -euo pipefail
          MISSING=()
          mapfile -t PHP_FILES < <(git ls-files -- '*.php' || true)
          for f in "${PHP_FILES[@]}"; do
            while IFS= read -r req_path; do
              [ -z "$req_path" ] && continue
              case "$req_path" in /*) continue ;; esac
              base_dir=$(dirname "$f")
              target=$(python3 -c "import os,sys;print(os.path.normpath(os.path.join(sys.argv[1], sys.argv[2])))" \
                       "$base_dir" "$req_path")
              [ -f "$target" ] || MISSING+=("$(realpath --relative-to='.' "$target" 2>/dev/null || echo "$target")  # required by $f")
            done < <(php -r '$c=file_get_contents($argv[1]); if(preg_match_all("/\\b(require|require_once|include|include_once)\\s*\\(?[\\\"\\\']([^\\\"\\\']+)/", $c, $m)){foreach($m[2] as $p){echo $p, PHP_EOL;}}' "$f")
          done
          if [ ${#MISSING[@]} -gt 0 ]; then
            { echo "### Still missing, create these files (pass 3):"; printf -- "- %s\n" "${MISSING[@]}"; } > ai/defects/missing-requires.txt
            echo "missing=true" >> "$GITHUB_OUTPUT"
          else
            echo "missing=false" >> "$GITHUB_OUTPUT"
          fi

      # ---------- Pass 2: さらに促す ----------
      - name: Compose prompt (pass 2 - with missing list)
        if: steps.validate2.outputs.missing == 'true'
        shell: bash
        run: |
          set -euo pipefail
          : > ai/prompt.combined.md
          [ -f ai/prompt.md ] && cat ai/prompt.md >> ai/prompt.combined.md
          if [ -f ai/defects/missing-requires.txt ]; then
            {
              echo
              echo "## Still missing required PHP files (pass 3)"
              cat ai/defects/missing-requires.txt
            } >> ai/prompt.combined.md
          fi

      - name: Run Codex (pass 2)
        if: steps.validate2.outputs.missing == 'true'
        uses: openai/codex-action@main
        with:
          openai-api-key: "${{ secrets.OPENAI_API_KEY }}"
          prompt-file: "ai/prompt.combined.md"
          model: "${{ inputs.model != '' && inputs.model || 'gpt-4.1' }}"
          sandbox: "workspace-write"
        env:
          SPEC_FILES: "${{ env.SPEC_FILES }}"

      # ---------- Final validate ----------
      - name: Final validate requires
        id: final_validate
        shell: bash
        run: |
          set -euo pipefail
          MISSING=()
          mapfile -t PHP_FILES < <(git ls-files -- '*.php' || true)
          for f in "${PHP_FILES[@]}"; do
            while IFS= read -r req_path; do
              [ -z "$req_path" ] && continue
              case "$req_path" in /*) continue ;; esac
              base_dir=$(dirname "$f")
              target=$(python3 -c "import os,sys;print(os.path.normpath(os.path.join(sys.argv[1], sys.argv[2])))" \
                       "$base_dir" "$req_path")
              [ -f "$target" ] || MISSING+=("$target")
            done < <(php -r '$c=file_get_contents($argv[1]); if(preg_match_all("/\\b(require|require_once|include|include_once)\\s*\\(?[\\\"\\\']([^\\\"\\\']+)/", $c, $m)){foreach($m[2] as $p){echo $p, PHP_EOL;}}' "$f")
          done
          if [ ${#MISSING[@]} -gt 0 ]; then
            printf "::error::Still missing files after 3 passes:\n%s\n" "$(printf '%s\n' "${MISSING[@]}")"
            exit 1
          fi

      # ---------- 変更の要約（デバッグ向け） ----------
      - name: Show diff summary
        shell: bash
        run: |
          set -euo pipefail
          git status --porcelain=v1 || true
          git diff --stat || true

      # ---------- PR 作成 ----------
      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v7
        with:
          token: "${{ secrets.GH_PAT_WORKFLOWS || github.token }}"
          branch: "ai/codex/batch-${{ github.run_id }}"
          base: "${{ github.ref_name }}"
          title: "AI: apply Codex changes"
          commit-message: "chore(ai): apply Codex changes (automated)"
          body: |
            Automated changes generated by Codex from SPEC_FILES.
            - mode: `${{ inputs.mode }}`
            - model: `${{ inputs.model != '' && inputs.model || 'gpt-4.1' }}`
          committer: "github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>"
          author:    "github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>"
          signoff: false
          draft: false
          path: "."
