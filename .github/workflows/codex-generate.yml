name: "Codex Generate (autofix loop)"

on:
  workflow_call:
    inputs:
      mode:
        description: "full:全集成 / incremental:差分"
        required: false
        default: "full"
        type: string
      model:
        description: "OpenAIモデル名（空欄可）"
        required: false
        default: ""
        type: string
    secrets:
      OPENAI_API_KEY:
        required: true

permissions:
  contents: write
  pull-requests: write

env:
  SPEC_FILES: |
    spec/generation.txt
    spec/testing.txt
    spec/environment.txt
    spec/functional.txt
  ALLOWED_GLOBS: |
    src/**
    tests/**
    tools/**
    storage/**
    logs/**
    app.php
    env-lite.php
    health-lite.php
    .htaccess
    ai/CHANGELOG_AI.md

jobs:
  codex:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Preflight – OPENAI_API_KEY
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        shell: bash
        run: |
          set -euo pipefail
          if [ -z "${OPENAI_API_KEY:-}" ]; then
            echo "::error::OPENAI_API_KEY is missing"
            exit 1
          fi

      - name: Prepare defects file
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p ai/defects
          : > ai/defects/missing-requires.txt

      - name: Compose prompt (pass 1)
        shell: bash
        run: |
          set -euo pipefail
          if [ -f ai/prompt.md ]; then
            cat ai/prompt.md > ai/prompt.combined.md
          else
            printf "# Prompt\n\n" > ai/prompt.combined.md
          fi
          if [ -s ai/defects/missing-requires.txt ]; then
            printf "\n\n## Missing artifacts to create\n" >> ai/prompt.combined.md
            cat ai/defects/missing-requires.txt >> ai/prompt.combined.md
          fi

      - name: Run Codex (pass 1)
        id: codex1
        uses: openai/codex-action@main
        with:
          openai-api-key: ${{ secrets.OPENAI_API_KEY }}
          prompt-file: "ai/prompt.combined.md"
          model: "${{ inputs.model }}"
          sandbox: "workspace-write"
        env:
          SPEC_FILES: ${{ env.SPEC_FILES }}

      - name: Validate requires (pass 1)
        id: validate1
        shell: bash
        run: |
          set -euo pipefail
          MISSING=()
          mapfile -t PHP_FILES < <(git ls-files -- "*.php" || true)
          for f in "${PHP_FILES[@]}"; do
            while IFS= read -r line; do
              req_path=$(echo "$line" | sed -E 's/.*require(_once)?\s*\(?["'\''"]([^"'\''\)]+)["'\''"]\)?;.*/\2/')
              [ -n "$req_path" ] || continue
              case "$req_path" in /*) continue ;; esac
              base_dir=$(dirname "$f")
              target=$(python3 - << 'PY'
import os,sys
print(os.path.normpath(os.path.join(sys.argv[1], sys.argv[2])))
PY
"$base_dir" "$req_path")
              [ -f "$target" ] || MISSING+=("$(realpath --relative-to="." "$target" 2>/dev/null || echo "$target")  # required by $f")
            done < <(grep -nE 'require(_once)?\s*\(|require(_once)?\s*["'\''"]|include\s*\(|include\s*["'\''"]' "$f" || true)
          done
          if [ ${#MISSING[@]} -gt 0 ]; then
            {
              echo "### Create these files with implementations:"
              printf -- "- %s\n" "${MISSING[@]}"
            } > ai/defects/missing-requires.txt
            echo "missing=true" >> "$GITHUB_OUTPUT"
          else
            echo "missing=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Compose prompt (pass 2)
        if: steps.validate1.outputs.missing == 'true'
        shell: bash
        run: |
          set -euo pipefail
          cat ai/prompt.md > ai/prompt.combined.md
          printf "\n\n## Missing artifacts to create (pass 2)\n" >> ai/prompt.combined.md
          cat ai/defects/missing-requires.txt >> ai/prompt.combined.md

      - name: Run Codex (pass 2)
        if: steps.validate1.outputs.missing == 'true'
        id: codex2
        uses: openai/codex-action@main
        with:
          openai-api-key: ${{ secrets.OPENAI_API_KEY }}
          prompt-file: "ai/prompt.combined.md"
          model: "${{ inputs.model }}"
          sandbox: "workspace-write"
        env:
          SPEC_FILES: ${{ env.SPEC_FILES }}

      - name: Re-validate requires (pass 2)
        if: steps.validate1.outputs.missing == 'true'
        id: validate2
        shell: bash
        run: |
          set -euo pipefail
          MISSING=()
          mapfile -t PHP_FILES < <(git ls-files -- "*.php" || true)
          for f in "${PHP_FILES[@]}"; do
            while IFS= read -r line; do
              req_path=$(echo "$line" | sed -E 's/.*require(_once)?\s*\(?["'\''"]([^"'\''\)]+)["'\''"]\)?;.*/\2/')
              [ -n "$req_path" ] || continue
              case "$req_path" in /*) continue ;; esac
              base_dir=$(dirname "$f")
              target=$(python3 - << 'PY'
import os,sys
print(os.path.normpath(os.path.join(sys.argv[1], sys.argv[2])))
PY
"$base_dir" "$req_path")
              [ -f "$target" ] || MISSING+=("$(realpath --relative-to="." "$target" 2>/dev/null || echo "$target")  # required by $f")
            done < <(grep -nE 'require(_once)?\s*\(|require(_once)?\s*["'\''"]|include\s*\(|include\s*["'\''"]' "$f" || true)
          done
          if [ ${#MISSING[@]} -gt 0 ]; then
            {
              echo "### Still missing, create these files (pass 3):"
              printf -- "- %s\n" "${MISSING[@]}"
            } > ai/defects/missing-requires.txt
            echo "missing=true" >> "$GITHUB_OUTPUT"
          else
            echo "missing=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Compose prompt (pass 3)
        if: steps.validate2.outputs.missing == 'true'
        shell: bash
        run: |
          set -euo pipefail
          cat ai/prompt.md > ai/prompt.combined.md
          printf "\n\n## Missing artifacts to create (final)\n" >> ai/prompt.combined.md
          cat ai/defects/missing-requires.txt >> ai/prompt.combined.md

      - name: Run Codex (pass 3)
        if: steps.validate2.outputs.missing == 'true'
        id: codex3
        uses: openai/codex-action@main
        with:
          openai-api-key: ${{ secrets.OPENAI_API_KEY }}
          prompt-file: "ai/prompt.combined.md"
          model: "${{ inputs.model }}"
          sandbox: "workspace-write"
        env:
          SPEC_FILES: ${{ env.SPEC_FILES }}

      - name: Final validate requires
        id: final_validate
        shell: bash
        run: |
          set -euo pipefail
          MISSING=()
          mapfile -t PHP_FILES < <(git ls-files -- "*.php" || true)
          for f in "${PHP_FILES[@]}"; do
            while IFS= read -r line; do
              req_path=$(echo "$line" | sed -E 's/.*require(_once)?\s*\(?["'\''"]([^"'\''\)]+)["'\''"]\)?;.*/\2/')
              [ -n "$req_path" ] || continue
              case "$req_path" in /*) continue ;; esac
              base_dir=$(dirname "$f")
              target=$(python3 - << 'PY'
import os,sys
print(os.path.normpath(os.path.join(sys.argv[1], sys.argv[2])))
PY
"$base_dir" "$req_path")
              [ -f "$target" ] || MISSING+=("$target")
            done < <(grep -nE 'require(_once)?\s*\(|require(_once)?\s*["'\''"]|include\s*\(|include\s*["'\''"]' "$f" || true)
          done
          if [ ${#MISSING[@]} -gt 0 ]; then
            printf "::error::Still missing files after 3 passes:\n%s\n" "$(printf '%s\n' "${MISSING[@]}")"
            exit 1
          fi

      - name: Gate diffs to allowed paths
        shell: bash
        run: |
          set -euo pipefail
          ALLOWED=()
          while IFS= read -r g; do [ -z "$g" ] || ALLOWED+=("$g"); done <<< "${ALLOWED_GLOBS}"
          git add -A
          mapfile -t CHANGED < <(git status --porcelain | awk '{print $2}')
          reject=0
          for f in "${CHANGED[@]}"; do
            ok=false
            for g in "${ALLOWED[@]}"; do
              if [[ "$f" == $g ]]; then ok=true; break; fi
            done
            if [ "$ok" = false ]; then
              echo "::error::disallowed change: $f"
              reject=1
            fi
          done
          if [ $reject -eq 1 ]; then
            echo "Allowed patterns were:"
            printf ' - %s\n' "${ALLOWED[@]}"
            exit 1
          fi

      - name: Show diff summary
        shell: bash
        run: |
          git status
          git diff --stat || true

      - name: Create PR
        uses: peter-evans/create-pull-request@v7
        with:
          token: "${{ secrets.GITHUB_TOKEN }}"
          title: "AI: apply Codex changes"
          body: |
            Automated changes by Codex with autofix loop (up to 3 passes).
            Mode: "${{ inputs.mode || 'full' }}"
          branch: "ai/codex/batch-${{ github.run_id }}"
          base: "main"
          signoff: true
          commit-message: "chore(ai): apply Codex changes"
