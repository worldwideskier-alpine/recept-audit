name: "Codex Generate (spec-driven)"

on:
  workflow_call:
    inputs:
      mode:
        description: "実行モード: full（全生成） / incremental（差分）"
        required: false
        default: "full"
        type: string
      model:
        description: "OpenAI モデル名（任意）"
        required: false
        default: ""
        type: string
    secrets:
      OPENAI_API_KEY:
        required: true
  workflow_dispatch:
    inputs:
      mode:
        description: "実行モード: full（全生成） / incremental（差分）"
        required: false
        default: "full"
        type: string
      model:
        description: "OpenAI モデル名（任意）"
        required: false
        default: ""
        type: string

permissions:
  contents: write
  pull-requests: write

jobs:
  generate:
    name: "generate"
    runs-on: "ubuntu-latest"

    env:
      SPEC_GROUPS: "foundation env-profiles features tests"
      PROMPT_FILE: "ai/prompt.md"
      BRANCH_PREFIX: "ai/codex/batch-"
      PROTECT_GLOBS: "^spec/|^\\.github/"

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v4"

      - name: "Setup Node (for actions runtime)"
        uses: "actions/setup-node@v4"
        with:
          node-version: "20"

      - name: "Preflight - API key"
        shell: "bash"
        run: |
          set -euo pipefail
          if [ -z "${{ secrets.OPENAI_API_KEY }}" ]; then
            echo "::error::OPENAI_API_KEY is missing"; exit 1;
          fi

      - name: "Compose prompt from spec/"
        id: "prompt"
        shell: "bash"
        run: |
          set -euo pipefail
          mkdir -p "$(dirname "${PROMPT_FILE}")"
          PROMPT="${PROMPT_FILE}"
          : > "${PROMPT}"

          collect() {
            local group="$1"
            # md / txt / yaml(yml) / json を対象、安定ソート
            find "spec/${group}" -type f \
              \( -name "*.md" -o -name "*.txt" -o -name "*.yaml" -o -name "*.yml" -o -name "*.json" \) \
              -print 2>/dev/null | LC_ALL=C sort || true
          }
          add_file() {
            local f="$1"
            printf '\n\n<!-- file: %s -->\n\n' "$f" >> "${PROMPT}"
            cat "$f" >> "${PROMPT}"
            printf '\n' >> "${PROMPT}"
          }

          have=0
          for g in ${SPEC_GROUPS}; do
            while IFS= read -r f; do
              [ -n "$f" ] && [ -f "$f" ] && add_file "$f" && have=1
            done < <(collect "$g")
          done

          # 末尾にルールを追記（heredoc不要、printfのみ）
          {
            printf '%s\n' '<!-- authoring-rules -->'
            printf '%s\n' 'You are operating in a repository workspace with write tools enabled.'
            printf '%s\n' 'Do not output long analysis. Create/overwrite files directly in the allowed paths.'
            printf '%s\n' 'If a directory or file is missing, create it; write fully working PHP code and tests.'
            printf '%s\n' 'All generated code must pass within `tests/`. Keep spec files under `spec/` untouched.'
            printf '%s\n' 'Prefer creating minimal working scaffolds over skipping ambiguous pieces.'
            printf '%s\n' '<!-- /authoring-rules -->'
          } >> "${PROMPT}"

          if [ "${have}" -eq 0 ]; then
            echo "::error::No spec files found under spec/{${SPEC_GROUPS// /, }}" ; exit 1;
          fi

          echo "prompt_path=${PROMPT}" >> "${GITHUB_OUTPUT}"

      - name: "Run Codex"
        id: "codex"
        uses: "openai/codex-action@main"
        with:
          openai-api-key: "${{ secrets.OPENAI_API_KEY }}"
          prompt-file: "${{ steps.prompt.outputs.prompt_path }}"
          model: "${{ inputs.model || '' }}"
          sandbox: "workspace-write"
        # 生成に失敗したらそこで止める
        continue-on-error: false

      - name: "Show diff summary"
        id: "diff"
        shell: "bash"
        run: |
          set -euo pipefail
          echo "::group::git status"
          git status --porcelain=v1
          echo "::endgroup::"
          echo "::group::git diff stat"
          git diff --stat || true
          echo "::endgroup::"

          CHANGED="false"
          if ! git diff --quiet || ! git diff --cached --quiet; then
            CHANGED="true"
          fi
          echo "changed=${CHANGED}" >> "${GITHUB_OUTPUT}"

      - name: "Guard: forbid touching protected paths"
        if: "steps.diff.outputs.changed == 'true'"
        shell: "bash"
        run: |
          set -euo pipefail
          BAD=$(git diff --name-only | grep -E "${PROTECT_GLOBS}" || true)
          if [ -n "${BAD}" ]; then
            echo "::error::Detected changes in protected paths:"
            echo "${BAD}"
            exit 1
          fi

      - name: "Configure git author"
        shell: "bash"
        run: |
          set -euo pipefail
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name  "github-actions[bot]"

      - name: "Create Pull Request"
        if: "steps.diff.outputs.changed == 'true'"
        uses: "peter-evans/create-pull-request@v6"
        with:
          token: "${{ secrets.GITHUB_TOKEN }}"
          title: "AI: apply Codex changes (${ { inputs.mode }})"
          body: |
            Automated changes generated by Codex.
            - Mode: `${{ inputs.mode }}`
            - Model: `${{ inputs.model }}`
            - Prompt: `${{ steps.prompt.outputs.prompt_path }}`
          commit-message: "chore(ai): apply Codex changes"
          branch: "${{ env.BRANCH_PREFIX }}${{ github.run_id }}"
          delete-branch: true
          draft: false
          signoff: false
          base: "main"
          labels: "ai, codex, automated"

      - name: "No changes note"
        if: "steps.diff.outputs.changed != 'true'"
        shell: "bash"
        run: |
          echo "No changes to commit. Skipping PR."
