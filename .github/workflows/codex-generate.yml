# .github/workflows/codex-generate.yml
name: "Codex Generate (spec-driven)"

on:
  workflow_call:
    inputs:
      mode:
        description: "実行モード: full（全生成） / incremental（差分）"
        required: false
        default: "full"
        type: string
      model:
        description: "OpenAI モデル名（任意）"
        required: false
        default: ""
        type: string
    secrets:
      OPENAI_API_KEY:
        description: "OpenAI API Key"
        required: true

  workflow_dispatch:
    inputs:
      mode:
        description: "実行モード: full（全生成） / incremental（差分）"
        required: false
        default: "full"
        type: choice
        options: ["full", "incremental"]
      model:
        description: "OpenAI モデル名（任意）"
        required: false
        default: ""
        type: string

permissions:
  contents: write
  pull-requests: write

env:
  # 仕様書のルートとサブディレクトリ（必要に応じて追加してください）
  SPEC_ROOT: "spec"
  SPEC_DIRS: "foundation env-profiles features tests"

  # 生成物（プロンプトとパッチ）
  PROMPT_FILE: "ai/prompt.md"
  PATCH_FILE: "ai/patch.diff"

  # モデル（入力が空ならデフォルトを使用）
  MODEL_DEFAULT: "gpt-4o-mini"
  OPENAI_MODEL: ${{ inputs.model != '' && inputs.model || 'gpt-4o-mini' }}

  # 生成ブランチ
  CODEX_BRANCH: "ai/codex/batch-${{ github.run_id }}"

jobs:
  generate:
    name: "Generate from specs and open PR"
    runs-on: "ubuntu-latest"

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v4"

      # 依存キャッシュは lock ファイルがある場合のみ
      - name: "Setup Node (with cache)"
        if: ${{ hashFiles('**/package-lock.json','**/npm-shrinkwrap.json','**/yarn.lock') != '' }}
        uses: "actions/setup-node@v4"
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: |
            **/package-lock.json
            **/npm-shrinkwrap.json
            **/yarn.lock

      - name: "Setup Node (no cache)"
        if: ${{ hashFiles('**/package-lock.json','**/npm-shrinkwrap.json','**/yarn.lock') == '' }}
        uses: "actions/setup-node@v4"
        with:
          node-version: "20"

      - name: "Preflight: API key"
        shell: "bash"
        run: |
          set -euo pipefail
          mkdir -p "ai"
          if [ -z "${{ secrets.OPENAI_API_KEY }}" ]; then
            echo "::error::OPENAI_API_KEY is not set"
            exit 1
          fi

      # 仕様書を収集して 1 ファイルのプロンプトにまとめる（heredoc 不使用）
      - name: "Compose prompt from spec (no-heredoc)"
        shell: "bash"
        env:
          SPEC_ROOT: "${{ env.SPEC_ROOT }}"
          SPEC_DIRS: "${{ env.SPEC_DIRS }}"
          PROMPT_FILE: "${{ env.PROMPT_FILE }}"
        run: |
          set -euo pipefail
          : > "$PROMPT_FILE"
          printf "%s\n" "You must return ONLY a unified diff (patch). No explanations, no markdown fences." >> "$PROMPT_FILE"
          printf "\n%s\n" "=== SPEC START ===" >> "$PROMPT_FILE"

          # 各ディレクトリ内の .md/.txt/.yml/.yaml/.json をソートして連結
          for d in $SPEC_DIRS; do
            if [ -d "$SPEC_ROOT/$d" ]; then
              while IFS= read -r -d '' f; do
                printf "\n\n# file: %s\n\n" "$f" >> "$PROMPT_FILE"
                cat "$f" >> "$PROMPT_FILE"
              done < <(find "$SPEC_ROOT/$d" -type f \( -name "*.md" -o -name "*.txt" -o -name "*.yml" -o -name "*.yaml" -o -name "*.json" \) -print0 | sort -z)
            fi
          done

          printf "\n%s\n" "=== SPEC END ===" >> "$PROMPT_FILE"

      # リポジトリに常設した JS を実行（heredoc/printf 連結を使わない）
      - name: "Run Codex (Node)"
        shell: "bash"
        env:
          OPENAI_API_KEY: "${{ secrets.OPENAI_API_KEY }}"
          OPENAI_MODEL:   "${{ env.OPENAI_MODEL }}"
          PROMPT_FILE:    "${{ env.PROMPT_FILE }}"
          PATCH_FILE:     "${{ env.PATCH_FILE }}"
        run: |
          set -euo pipefail
          if [ ! -f "tools/run_codex.js" ]; then
            echo "::error::tools/run_codex.js missing. Please add the file to the repository."
            exit 1
          fi
          node -v
          node tools/run_codex.js

      - name: "Normalize & verify patch"
        shell: "bash"
        env:
          PATCH_FILE: "${{ env.PATCH_FILE }}"
        run: |
          set -euo pipefail
          python3 - <<'PY'
import os, sys, re, pathlib
p = pathlib.Path(os.environ["PATCH_FILE"])
if not p.exists():
    sys.exit("patch not found")
txt = p.read_text(encoding="utf-8").replace("\r","")
if not re.search(r"^(diff --git |\-\-\- |\+\+\+ |@@ )", txt, re.M):
    sys.exit("not a unified diff")
if not txt.endswith("\n"):
    txt += "\n"
p.write_text(txt, encoding="utf-8")
print("patch verified")
PY

      - name: "Apply patch (no commit yet)"
        shell: "bash"
        env:
          PATCH_FILE: "${{ env.PATCH_FILE }}"
          MODE: "${{ inputs.mode }}"
        run: |
          set -euo pipefail
          # full のときは作業ツリーをクリーンに（必要に応じて調整）
          if [ "$MODE" = "full" ]; then
            git rm -r --quiet --ignore-unmatch src/ tools/ public/ storage/ logs/ || true
          fi
          git apply -p0 "$PATCH_FILE"

      - name: "Show diff summary"
        shell: "bash"
        run: |
          set -euo pipefail
          git status --porcelain
          git diff --stat || true

      - name: "Create PR (auto branch)"
        uses: "peter-evans/create-pull-request@v6"
        with:
          token: "${{ secrets.GITHUB_TOKEN }}"
          branch: "${{ env.CODEX_BRANCH }}"
          title: "AI: apply Codex changes"
          commit-message: "AI: generated by Codex from specs"
          body: |
            This PR was auto-generated from specs by the Codex workflow.
            - Mode: **${{ inputs.mode }}**
            - Model: **${{ env.OPENAI_MODEL }}**
          add-paths: |
            .
          delete-branch: true
          draft: false

      - name: "No changes guard"
        if: ${{ steps.create_pull_request.outputs.pull-request-number == '' }}
        shell: "bash"
        run: |
          echo "No changes were generated."
