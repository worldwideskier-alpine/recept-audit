name: "Codex Generate (reusable)"

on:
  workflow_call:
    inputs:
      mode:
        description: "実行モード: full(完全生成) / incremental(差分)"
        required: false
        default: "full"
        type: "string"
      model:
        description: "OpenAI モデル名（未指定なら既定）"
        required: false
        default: ""
        type: "string"
    secrets:
      OPENAI_API_KEY:
        required: true

  workflow_dispatch:
    inputs:
      mode:
        description: "実行モード: full(完全生成) / incremental(差分)"
        required: false
        default: "full"
        type: "string"
      model:
        description: "OpenAI モデル名（未指定なら既定）"
        required: false
        default: ""
        type: "string"

permissions:
  contents: "write"
  pull-requests: "write"

env:
  SPEC_FILES: |
    spec/generation.txt
    spec/testing.txt
    spec/environment.txt
    spec/functional.txt
  FUNCTIONAL_SPEC: "spec/functional.txt"
  ALLOWLIST_FILE: "ai/allowlist.txt"
  PROMPT_FILE: "ai/prompt.md"
  BRANCH_NAME: "ai/codex/batch-${{ github.run_id }}"

jobs:
  generate:
    name: "generate"
    runs-on: "ubuntu-latest"

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v4"

      # ★ 修正点: cache を一切指定しない（エラーの原因だった 'none' を撤去）
      - name: "Setup Node"
        uses: "actions/setup-node@v4"
        with:
          node-version: "20"

      - name: "Preflight - API key"
        shell: "bash"
        run: |
          set -eu
          if [ -z "${{ secrets.OPENAI_API_KEY }}" ]; then
            echo "::error::OPENAI_API_KEY is empty or missing"
            exit 1
          fi
          echo "OPENAI_API_KEY present"

      - name: "Prepare dirs"
        shell: "bash"
        run: |
          set -eu
          mkdir -p "ai"

      - name: "Build prompt from specs"
        shell: "bash"
        run: |
          set -eu
          : > "${PROMPT_FILE}"
          printf "%s\n" "# Codex generation prompt" >> "${PROMPT_FILE}"
          printf "%s\n" "" >> "${PROMPT_FILE}"
          for f in ${SPEC_FILES}; do
            if [ -f "${f}" ]; then
              printf "%s\n" "" >> "${PROMPT_FILE}"
              printf "%s\n" "--- ${f} ---" >> "${PROMPT_FILE}"
              cat "${f}" >> "${PROMPT_FILE}"
              printf "%s\n" "" >> "${PROMPT_FILE}"
            fi
          done

      - name: "Run Codex"
        id: "codex"
        uses: "openai/codex-action@main"
        with:
          openai-api-key: "${{ secrets.OPENAI_API_KEY }}"
          prompt-file: "${{ env.PROMPT_FILE }}"
          model: "${{ inputs.model || '' }}"
          sandbox: "workspace-write"

      - name: "Show diff summary"
        shell: "bash"
        run: |
          set -eu
          echo "=== git status ==="
          git status --porcelain=v1 || true
          echo "=== git diff (stat) ==="
          git diff --stat || true

      - name: "Configure git author"
        shell: "bash"
        run: |
          set -eu
          git config --global user.email "ci-bot@example.invalid"
          git config --global user.name "CI Bot"
          git config --global --add safe.directory "$GITHUB_WORKSPACE"

      - name: "Fail if no changes (print last message)"
        shell: "bash"
        run: |
          set -eu
          if [ -z "$(git status --porcelain=v1)" ]; then
            echo "::notice::No file changes were produced by Codex."
            exit 0
          fi

      - name: "Create Pull Request"
        uses: "peter-evans/create-pull-request@v7"
        with:
          token: "${{ secrets.GITHUB_TOKEN }}"
          commit-message: "chore(ai): apply Codex changes (spec-driven)"
          title: "AI: Codex updates"
          body: "Automated changes generated by Codex based on spec files."
          branch: "${{ env.BRANCH_NAME }}"
          base: "main"
          signoff: "true"
          draft: "false"
