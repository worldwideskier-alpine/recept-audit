name: "Codex Generate (spec-driven, supports full wipe)"

on:
  workflow_dispatch:
    inputs:
      mode:
        description: "実行モード: full（全面再生成） / incremental（差分）"
        required: false
        default: "full"
      model:
        description: "OpenAI モデル（未指定ならデフォルト）"
        required: false
        default: ""
  workflow_call:
    inputs:
      mode:
        required: false
        default: "full"
        type: string
      model:
        required: false
        default: ""
        type: string
    secrets:
      OPENAI_API_KEY:
        required: true

permissions:
  contents: "write"
  pull-requests: "write"

env:
  SPEC_FILES: |
    spec/generation.txt
    spec/testing.txt
    spec/environment.txt
    spec/functional.txt
  PROMPT_FILE: "ai/prompt.md"
  PROMPT_COMBINED: "ai/prompt.combined.md"

jobs:
  generate:
    name: "generate"
    runs-on: "ubuntu-latest"

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v4"
        with:
          fetch-depth: 0

      - name: "Preflight: check OPENAI_API_KEY"
        shell: "bash"
        run: |
          set -euo pipefail
          if [ -z "${{ secrets.OPENAI_API_KEY }}" ]; then
            echo "::error::OPENAI_API_KEY is missing."
            exit 1
          fi

      - name: "Full mode: wipe workspace (keep spec/, ai/, .github/)"
        if: ${{ inputs.mode == 'full' }}
        shell: "bash"
        run: |
          set -euo pipefail

          # keep 判定（./ の有無どちらでも可）
          keep() {
            rel="${1#./}"
            if [[ "$rel" =~ ^(spec/|ai/|\.github/) ]]; then
              return 0
            fi
            return 1
          }

          echo "::group::Wipe (git-tracked files)"
          # Git 管理ファイルは 1 件ずつ安全に判定
          while IFS= read -r -d '' f; do
            if keep "$f"; then
              echo "keep: $f"
            else
              git rm -f -- "$f"
            fi
          done < <(git ls-files -z)
          echo "::endgroup::"

          echo "::group::Wipe (untracked files)"
          # 非 Git 管理のファイルも除去
          while IFS= read -r -d '' f; do
            if keep "$f"; then
              echo "keep: $f"
            else
              rm -f -- "$f"
            fi
          done < <(git ls-files -z --others --exclude-standard)
          echo "::endgroup::"

          # 空ディレクトリ掃除（.git/ は除外）
          find . -type d -empty -not -path "./.git" -not -path "./.git/*" -delete || true

          echo "::notice::Workspace wiped (protected kept)."

      - name: "Assert specs exist (after wipe)"
        shell: "bash"
        run: |
          set -euo pipefail
          missing=0
          while IFS= read -r f; do
            [ -z "$f" ] && continue
            if [ ! -f "$f" ]; then
              echo "::error::Spec file not found: $f"
              missing=1
            else
              echo "ok: $f"
            fi
          done <<'EOF'
          ${{ env.SPEC_FILES }}
          EOF
          if [ "$missing" -ne 0 ]; then
            exit 1
          fi

      - name: "Build prompt from specs"
        id: "build_prompt"
        shell: "bash"
        run: |
          set -euo pipefail
          mkdir -p ai
          : > "${{ env.PROMPT_COMBINED }}"
          {
            echo "# Codex generation prompt"
            echo
            echo "- MODE: ${{ inputs.mode }}"
            echo
          } >> "${{ env.PROMPT_COMBINED }}"

          while IFS= read -r f; do
            [ -z "$f" ] && continue
            echo >> "${{ env.PROMPT_COMBINED }}"
            echo "<!-- file: $f -->" >> "${{ env.PROMPT_COMBINED }}"
            echo >> "${{ env.PROMPT_COMBINED }}"
            cat "$f" >> "${{ env.PROMPT_COMBINED }}"
            echo >> "${{ env.PROMPT_COMBINED }}"
          done <<'EOF'
          ${{ env.SPEC_FILES }}
          EOF
          cp -f "${{ env.PROMPT_COMBINED }}" "${{ env.PROMPT_FILE }}"

      - name: "Run Codex"
        uses: "openai/codex-action@main"
        with:
          openai-api-key: "${{ secrets.OPENAI_API_KEY }}"
          prompt-file: "${{ env.PROMPT_COMBINED }}"
          model: "${{ inputs.model || '' }}"
          sandbox: "workspace-write"

      - name: "Show diff summary"
        id: "diff"
        shell: "bash"
        run: |
          set -euo pipefail
          echo "=== git status ==="
          git status --porcelain=v1 || true
          echo "=== diff stat ==="
          git diff --stat || true
          if git status --porcelain=v1 | grep -q .; then
            echo "changed=true" >> "$GITHUB_OUTPUT"
          else
            echo "changed=false" >> "$GITHUB_OUTPUT"
          fi

      - name: "Configure git author"
        if: ${{ steps.diff.outputs.changed == 'true' }}
        shell: "bash"
        run: |
          set -euo pipefail
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name  "github-actions[bot]"

      - name: "Create Pull Request"
        if: ${{ steps.diff.outputs.changed == 'true' }}
        uses: "peter-evans/create-pull-request@v7"
        with:
          token: "${{ secrets.GITHUB_TOKEN }}"
          add-paths: |
            .
          commit-message: "chore(ai): apply Codex generation"
          title: "AI: Codex updates (mode=${{ inputs.mode }})"
          body: |
            Automated changes generated by Codex.
            - mode: `${{ inputs.mode }}`
            - model: `${{ inputs.model || 'default' }}`
            - specs: `${{ env.SPEC_FILES }}`
          branch: "ai/codex/batch-${{ github.run_id }}"
          base: "main"
          signoff: false
          delete-branch: true

      - name: "No changes"
        if: ${{ steps.diff.outputs.changed != 'true' }}
        shell: "bash"
        run: |
          echo "No changes to commit."
