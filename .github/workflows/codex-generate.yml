name: "Codex Generate (spec-driven)"

on:
  workflow_call:
    inputs:
      mode:
        description: "実行モード: full（全生成）/ incremental（差分）"
        required: false
        default: "full"
        type: string
      model:
        description: "OpenAI モデル名（任意）"
        required: false
        default: ""
        type: string
    secrets:
      OPENAI_API_KEY:
        description: "OpenAI API Key"
        required: true
  workflow_dispatch:
    inputs:
      mode:
        description: "実行モード: full（全生成）/ incremental（差分）"
        required: false
        default: "full"
      model:
        description: "OpenAI モデル名（任意）"
        required: false
        default: ""

permissions:
  contents: write
  pull-requests: write

jobs:
  generate:
    name: "generate"
    runs-on: "ubuntu-latest"
    env:
      SPEC_FILES: "spec/generation.txt spec/testing.txt spec/environment.txt spec/functional.txt"
      PROMPT_FILE: "ai/prompt.md"
      DEFECTS_DIR: "ai/defects"
      ALLOW_MODE: "${{ inputs.mode }}"
      OPENAI_MODEL_DEFAULT: ""

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v4"

      - name: "Setup Node"
        uses: "actions/setup-node@v4"
        with:
            node-version: "20"

      - name: "Preflight: check OPENAI_API_KEY"
        shell: "bash"
        run: |
          set -Eeuo pipefail
          if [ -z "${{ secrets.OPENAI_API_KEY }}" ]; then
            echo "::error::OPENAI_API_KEY is missing"
            exit 1
          fi

      - name: "Prepare folders"
        shell: "bash"
        run: |
          set -Eeuo pipefail
          mkdir -p "$(dirname "${PROMPT_FILE}")" "${DEFECTS_DIR}"

      - name: "Compose prompt from specs (no heredoc)"
        shell: "bash"
        run: |
          set -Eeuo pipefail
          : > "${PROMPT_FILE}"
          for f in ${SPEC_FILES}; do
            if [ -f "${f}" ]; then
              printf '%s\n' '---' "<!-- file: '"${f}"' -->" >> "${PROMPT_FILE}"
              sed -e 's/\r$//' "${f}" >> "${PROMPT_FILE}"
              printf '\n' >> "${PROMPT_FILE}"
            fi
          done
          if [ ! -s "${PROMPT_FILE}" ]; then
            echo "::error::No spec files found."
            exit 1
          fi

      - name: "Scaffold minimal workspace"
        shell: "bash"
        run: |
          set -Eeuo pipefail
          printf '%s\n' \
            "src" "tests" "tools" "storage" \
            "evidence/static" "evidence/runtime" "evidence/pkg" "evidence/verify" \
            "dist" \
          | while IFS= read -r d; do mkdir -p "${d}"; done

      - name: "Run Codex (pass 1)"
        id: "codex1"
        uses: "openai/codex-action@main"
        with:
          openai-api-key: "${{ secrets.OPENAI_API_KEY }}"
          prompt-file: "${{ env.PROMPT_FILE }}"
          model: "${{ inputs.model || env.OPENAI_MODEL_DEFAULT }}"
          sandbox: "workspace-write"

      - name: "Validate PHP require/include"
        shell: "bash"
        run: |
          set -Eeuo pipefail
          : > "${DEFECTS_DIR}/missing-requires.txt"
          mapfile -t php_files < <(git ls-files -- '*.php' 2>/dev/null || true)
          if [ "${#php_files[@]}" -gt 0 ]; then
            for f in "${php_files[@]}"; do
              mapfile -t targets < <(grep -Eo "require(_once)?\s*\(\s*['\"][^'\"]+['\"]\s*\)|include(_once)?\s*\(\s*['\"][^'\"]+['\"]\s*\)" "${f}" \
                | sed -E "s/.*\(['\"]([^'\"]+)['\"]\).*/\1/")
              for t in "${targets[@]}"; do
                if [[ "${t}" != /* ]]; then base="$(dirname "${f}")"; path="${base}/${t}"; else path="${t}"; fi
                if [ ! -f "${path}" ]; then
                  printf '%s\t%s -> %s\n' "MISSING" "${f}" "${t}" >> "${DEFECTS_DIR}/missing-requires.txt"
                fi
              done
            done
          fi
          if [ -s "${DEFECTS_DIR}/missing-requires.txt" ]; then
            echo "::warning::Missing include/require detected. See ${DEFECTS_DIR}/missing-requires.txt"
          fi

      - name: "Show diff summary"
        shell: "bash"
        run: |
          set -Eeuo pipefail
          git status --porcelain=v1 || true
          git diff --stat || true

      - name: "Configure git author"
        shell: "bash"
        run: |
          set -Eeuo pipefail
          git config --global user.email "ci-bot@example.invalid"
          git config --global user.name  "CI Bot"

      - name: "Create Pull Request"
        uses: "peter-evans/create-pull-request@v7"
        with:
          token: "${{ github.token }}"
          branch: "ai/codex/batch-${{ github.run_id }}"
          base: "main"
          title: "AI: codegen (${{ inputs.mode }})"
          body: |
            Automated code generation from specs.
            - mode: `${{ inputs.mode }}`
            - model: `${{ inputs.model || 'default' }}`
            - defects: see `ai/defects/` if present
          add-paths: |
            .
          signoff: false
          draft: false
