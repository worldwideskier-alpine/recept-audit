name: "Codex Generate (spec-driven)"

on:
  workflow_call:
    inputs:
      mode:
        description: "実行モード: full（全生成）/ incremental（差分）"
        required: false
        default: "full"
        type: string
      model:
        description: "OpenAI モデル名（任意）"
        required: false
        default: ""
        type: string
    secrets:
      OPENAI_API_KEY:
        description: "OpenAI API Key"
        required: true

  # 手動実行でも試せるように（任意）
  workflow_dispatch:
    inputs:
      mode:
        description: "実行モード: full（全生成）/ incremental（差分）"
        required: false
        default: "full"
        type: string
      model:
        description: "OpenAI モデル名（任意）"
        required: false
        default: ""
        type: string

permissions:
  contents: write
  pull-requests: write

jobs:
  generate:
    runs-on: "ubuntu-latest"

    env:
      # v3 仕様の分割構成（固定ファイル名のみ記述。内容は specs 側で運用）
      PROMPT_FILE: "ai/prompt.md"
      DEFECTS_DIR: "ai/defects"
      # ここでは固定の分割ファイルのみを列挙（大きな旧仕様書は列挙しない）
      SPEC_FOUNDATION: "spec/foundation/README.md spec/foundation/file-globs.yml spec/foundation/language.json"
      SPEC_ENVS: "spec/env-profiles/*.yml"
      SPEC_FEATURES: "spec/features/*.md spec/features/*.yml spec/features/*.json"
      SPEC_TESTS: "spec/tests/**/*.md spec/tests/**/*.yml spec/tests/**/*.json"
      # 生成の許可ルールはリポジトリ固定の allowlist で管理
      ALLOWLIST_FILE: "ai/allowlist.txt"

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v4"

      - name: "Preflight: check OPENAI_API_KEY"
        shell: "bash"
        run: |
          set -euo pipefail
          if [ -z "${OPENAI_API_KEY:-}" ]; then
            echo "::error::OPENAI_API_KEY is missing"
            exit 1
          fi
          echo "OPENAI_API_KEY present"

      - name: "Build composite prompt from specs"
        shell: "bash"
        run: |
          set -euo pipefail

          mkdir -p "ai" "ai/defects"
          : > "${PROMPT_FILE}"

          add() { [ -f "$1" ] && { printf "\n\n# %s\n\n" "$1" >> "${PROMPT_FILE}"; cat "$1" >> "${PROMPT_FILE}"; }; }

          # foundation
          for f in ${SPEC_FOUNDATION}; do add "$f"; done
          # env profiles
          for f in ${SPEC_ENVS}; do add "$f"; done
          # features
          for f in ${SPEC_FEATURES}; do add "$f"; done
          # tests (仕様に添付されたサンプルや制約など)
          for f in ${SPEC_TESTS}; do add "$f"; done

          # 末尾にガイドライン（短文）
          {
            echo
            echo "<!-- authoring-rules -->"
            echo "RULES"
            echo "- 生成は idempotent。tests/ 配下に動作するテストを必ず同梱。"
            echo "- 既存ファイルがある場合は上書き可。仕様が勝つ。"
            echo "- 曖昧な場合は最小実装を生成し、tests で補う。"
            echo "<!-- /authoring-rules -->"
          } >> "${PROMPT_FILE}"

      - name: "Guard: forbid touching protected paths"
        shell: "bash"
        run: |
          set -euo pipefail
          # 触ってはいけない場所（必要なら拡張）
          PROTECTS=".git/** .github/** dist/** evidence/**"
          echo "${PROTECTS}" | tr " " "\n" > "${ALLOWLIST_FILE}"

      - name: "Run Codex"
        id: "codex"
        uses: "openai/codex-action@v2"
        with:
          openai-api-key: "${{ secrets.OPENAI_API_KEY }}"
          prompt-file: "${{ env.PROMPT_FILE }}"
          model: "${{ inputs.model || 'gpt-4.1-mini' }}"
          sandbox: "workspace-write"

      - name: "Show diff summary"
        shell: "bash"
        run: |
          set -euo pipefail
          git status --porcelain=v1 || true
          git diff --stat || true

      - name: "Configure git author"
        shell: "bash"
        run: |
          set -euo pipefail
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name  "github-actions[bot]"

      - name: "Commit and create PR (if changes)"
        shell: "bash"
        env:
          MODE: "${{ inputs.mode || 'full' }}"
        run: |
          set -euo pipefail

          if git diff --quiet && git diff --cached --quiet; then
            echo "No changes; skipping PR."
            exit 0
          fi

          BRANCH="ai/codex/batch-${GITHUB_RUN_ID}"
          git checkout -b "${BRANCH}"
          git add -A
          git commit -m "chore(ai): apply Codex changes (mode=${MODE})"

          # PR を作成
          gh pr create \
            --title "AI: Codex changes (mode=${MODE})" \
            --body  "Automated changes generated by Codex from specs." \
            --base  "main" \
            --head  "${BRANCH}" || true
        env:
          GH_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
