name: "Codex Generate (spec-driven)"

on:
  workflow_call:
    inputs:
      mode:
        description: "実行モード: full（全生成） / incremental（差分）"
        required: false
        type: string
        default: "full"
      model:
        description: "OpenAI モデル名（任意）"
        required: false
        type: string
        default: ""
    secrets:
      OPENAI_API_KEY:
        required: true

  workflow_dispatch:
    inputs:
      mode:
        description: "実行モード: full（全生成） / incremental（差分）"
        required: false
        default: "full"
        type: string
      model:
        description: "OpenAI モデル名（任意）"
        required: false
        default: ""
        type: string

permissions:
  contents: write
  pull-requests: write

jobs:
  generate:
    runs-on: "ubuntu-latest"

    env:
      SPEC_ROOT: "spec"
      SPEC_DIRS: "foundation env-profiles features tests"

      PROMPT_FILE: "ai/prompt.md"
      PATCH_FILE:  "ai/patch.diff"

      MODE:         ${{ inputs.mode  != '' && inputs.mode  || 'full' }}
      OPENAI_MODEL: ${{ inputs.model != '' && inputs.model || 'gpt-4o-mini' }}

      CODEX_BRANCH: "ai/codex/batch-${{ github.run_id }}"

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v4"

      - name: "Setup Node (no cache)"
        uses: "actions/setup-node@v4"
        with:
          node-version: "20"

      - name: "Preflight: API key"
        shell: "bash"
        run: |
          set -euo pipefail
          if [ -z "${{ secrets.OPENAI_API_KEY }}" ]; then
            echo "::error::OPENAI_API_KEY is not set"
            exit 1
          fi

      - name: "Compose prompt from spec (no-heredoc)"
        shell: "bash"
        run: |
          set -euo pipefail
          mkdir -p ai
          : > "$PROMPT_FILE"

          printf '%s\n' "# Codex generation prompt"            >> "$PROMPT_FILE"
          printf '%s\n' "mode: $MODE"                           >> "$PROMPT_FILE"
          printf '%s\n' "openai_model: $OPENAI_MODEL"           >> "$PROMPT_FILE"
          printf '%s\n' "---"                                   >> "$PROMPT_FILE"

          for d in $SPEC_DIRS; do
            [ -d "$SPEC_ROOT/$d" ] || continue
            while IFS= read -r -d '' f; do
              printf '%s\n' ""                        >> "$PROMPT_FILE"
              printf '%s\n' "--- file: $f ---"        >> "$PROMPT_FILE"
              sed 's/\r$//' "$f"                      >> "$PROMPT_FILE"
              printf '\n'                             >> "$PROMPT_FILE"
            done < <(find "$SPEC_ROOT/$d" -type f \
                    \( -name '*.md' -o -name '*.txt' -o -name '*.yaml' -o -name '*.yml' -o -name '*.json' \) \
                    -print0 | sort -z)
          done

      - name: "Prepare codex client (no-heredoc)"
        shell: "bash"
        run: |
          set -euo pipefail
          mkdir -p tools
          F="tools/run_codex.js"
          : > "$F"
          printf '%s\n' \
            "'use strict';" \
            "const fs = require('fs');" \
            "const path = require('path');" \
            "const fetch = global.fetch;" \
            "" \
            "const API_KEY = process.env.OPENAI_API_KEY;" \
            "const MODEL   = process.env.OPENAI_MODEL || 'gpt-4o-mini';" \
            "const PROMPT  = process.env.PROMPT_FILE;" \
            "const PATCH   = process.env.PATCH_FILE;" \
            "" \
            "if (!API_KEY) { console.error('missing OPENAI_API_KEY'); process.exit(1); }" \
            "if (!fs.existsSync(PROMPT)) { console.error('prompt not found: ' + PROMPT); process.exit(1); }" \
            "" \
            "const sys = [" \
            "  'You are an assistant that outputs ONLY a unified diff (patch).'," \
            "  'No explanations, no markdown fences, no prose. Output must start with diff --git.'," \
            "  'If a file is new, include the full file content in the patch.'" \
            "].join(' ');" \
            "" \
            "const user = fs.readFileSync(PROMPT, 'utf8');" \
            "" \
            "async function main() {" \
            "  const body = {" \
            "    model: MODEL," \
            "    messages: [" \
            "      { role: 'system', content: sys }," \
            "      { role: 'user',   content: user }" \
            "    ]," \
            "    temperature: 0.1" \
            "  };" \
            "" \
            "  const res = await fetch('https://api.openai.com/v1/chat/completions', {" \
            "    method: 'POST'," \
            "    headers: { 'Authorization': 'Bearer ' + API_KEY, 'Content-Type': 'application/json' }," \
            "    body: JSON.stringify(body)" \
            "  });" \
            "  if (!res.ok) { console.error('OpenAI API error: ' + res.status); process.exit(2); }" \
            "  const json = await res.json();" \
            "  let out = (json.choices && json.choices[0] && json.choices[0].message && json.choices[0].message.content) || '';" \
            "  const m = out.match(/```(?:diff|patch)?\\n([\\s\\S]*?)```/);" \
            "  if (m && m[1]) out = m[1];" \
            "  out = out.replace(/\\r/g, '');" \
            "  if (!/^diff --git /m.test(out)) { console.error('model did not return a unified diff'); process.exit(4); }" \
            "  fs.mkdirSync(path.dirname(PATCH), { recursive: true });" \
            "  fs.writeFileSync(PATCH, out, 'utf8');" \
            "  console.log('patch written:', PATCH);" \
            "}" \
            "main().catch(err => { console.error(err); process.exit(3); });" \
          >> "$F"

      - name: "Verify runner script"
        shell: "bash"
        run: |
          set -euo pipefail
          [ -f tools/run_codex.js ] || { echo "::error::tools/run_codex.js is missing"; exit 1; }

      - name: "Run Codex (node, no chmod)"
        shell: "bash"
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          set -euo pipefail
          node -v
          node tools/run_codex.js

      - name: "Normalize & verify patch (no heredoc)"
        shell: "bash"
        env:
          PATCH_FILE: ${{ env.PATCH_FILE }}
        run: |
          set -euo pipefail
          TMP_DIR="$(mktemp -d)"
          PY="$TMP_DIR/verify_patch.py"
          : > "$PY"
          printf '%s\n' \
            'import sys, re, pathlib' \
            'p = pathlib.Path("'$PATCH_FILE'")' \
            'if not p.exists():' \
            '    sys.exit("patch not found")' \
            'txt = p.read_text(encoding="utf-8").replace("\r","")' \
            'if not re.search(r"^(diff |\-\-\- |\+\+\+ |@@ )", txt, re.M):' \
            '    sys.exit("not a unified diff")' \
            'if not txt.endswith("\n"):' \
            '    txt = txt + "\n"' \
            'p.write_text(txt, encoding="utf-8")' \
            'print("patch verified")' \
          > "$PY"
          python3 "$PY"

      - name: "Apply patch & commit"
        id: "apply"
        shell: "bash"
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          set -euo pipefail

          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name  "github-actions[bot]"

          git checkout -b "$CODEX_BRANCH"
          git apply --whitespace=fix --reject "$PATCH_FILE"

          if [ -z "$(git status --porcelain)" ]; then
            echo "has_changes=0" >> "$GITHUB_OUTPUT"
            echo "No changes to commit."
            exit 0
          fi

          git add -A
          git commit -m "chore(ai): codex generation (mode=${MODE}, model=${OPENAI_MODEL})"
          echo "has_changes=1" >> "$GITHUB_OUTPUT"

      - name: "Push branch"
        if: ${{ steps.apply.outputs.has_changes == '1' }}
        shell: "bash"
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          set -euo pipefail
          git push -u origin "$CODEX_BRANCH"

      - name: "Create Pull Request"
        if: ${{ steps.apply.outputs.has_changes == '1' }}
        uses: "actions/github-script@v7"
        with:
          script: |
            const {owner, repo} = context.repo;
            const head = process.env.BRANCH;
            const base = "main";
            try {
              const {data: pr} = await github.pulls.create({
                owner, repo, head, base,
                title: "Codex generation",
                body: "Automated generation based on specs."
              });
              core.info(`PR: ${pr.html_url}`);
            } catch (e) {
              if (e.status === 422) {
                core.warning("PR already exists (possibly force-pushed earlier).");
              } else {
                throw e;
              }
            }
        env:
          BRANCH: ${{ env.CODEX_BRANCH }}

      - name: "Show diff summary"
        shell: "bash"
        run: |
          set -euo pipefail
          git --no-pager diff --stat || true
