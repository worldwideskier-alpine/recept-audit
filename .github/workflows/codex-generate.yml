name: "Codex Generate (spec-driven, node-run, no-chmod)"

on:
  workflow_call:
    inputs:
      mode:
        description: "実行モード: full（全生成）/ incremental（差分）"
        required: false
        default: "full"
        type: string
      model:
        description: "OpenAI モデル名（未指定なら既定を使用）"
        required: false
        default: ""
        type: string
    secrets:
      OPENAI_API_KEY:
        required: true

  workflow_dispatch:
    inputs:
      mode:
        description: "実行モード: full（全生成）/ incremental（差分）"
        required: false
        default: "full"
        type: string
      model:
        description: "OpenAI モデル名（未指定なら既定を使用）"
        required: false
        default: ""
        type: string

permissions:
  contents: write
  pull-requests: write

jobs:
  generate:
    runs-on: "ubuntu-latest"

    env:
      # 仕様書のルートと構成（spec_fixed_v3 に合わせたディレクトリ読み込み）
      SPEC_ROOT: "spec"
      SPEC_DIRS: "foundation env-profiles features tests"
      PROMPT_FILE: "ai/prompt.md"
      # モデルは入力が空なら既定値を使う（node スクリプト内で最終決定してもOK）
      MODEL_DEFAULT: "${{ inputs.model || 'gpt-4o-mini' }}"
      MODE: "${{ inputs.mode }}"
      # node 実行時に参照させる
      OPENAI_MODEL: "${{ inputs.model }}"
      # PR ブランチ名
      CODEx_BRANCH: "ai/codex/batch-${{ github.run_id }}"

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v4"

      - name: "Setup Node"
        uses: "actions/setup-node@v4"
        with:
          node-version: "20"
          # lockfile が無くても失敗しない。キャッシュは自動判定されるが、無ければ何もしない。
          cache: "npm"

      - name: "Preflight: API key"
        shell: "bash"
        run: |
          set -eu
          if [ -z "${{ secrets.OPENAI_API_KEY }}" ]; then
            echo "::error::OPENAI_API_KEY is not set"; exit 1;
          fi

      - name: "Compose prompt from spec (no-heredoc)"
        shell: "bash"
        run: |
          set -eu
          mkdir -p ai
          : > "$PROMPT_FILE"
          for d in $SPEC_DIRS; do
            if [ -d "$SPEC_ROOT/$d" ]; then
              echo "## $d" >> "$PROMPT_FILE"
              # md/txt/yaml/json を安定ソートで結合
              find "$SPEC_ROOT/$d" -type f \( -name '*.md' -o -name '*.txt' -o -name '*.yaml' -o -name '*.yml' -o -name '*.json' \) \
                | LC_ALL=C sort \
                | while read -r f; do
                    printf "\n\n# file: %s\n\n" "$f" >> "$PROMPT_FILE"
                    cat "$f" >> "$PROMPT_FILE"
                  done
            fi
          done
          echo "::notice::Prompt composed at $PROMPT_FILE"

      - name: "Install runtime deps if package.json exists"
        shell: "bash"
        run: |
          if [ -f package.json ]; then
            npm ci
          else
            echo "::notice::No package.json; skipping npm ci"
          fi

      - name: "Run Codex (node, no chmod)"
        env:
          OPENAI_API_KEY: "${{ secrets.OPENAI_API_KEY }}"
          OPENAI_MODEL: "${{ env.OPENAI_MODEL }}"
          MODEL_DEFAULT: "${{ env.MODEL_DEFAULT }}"
          MODE: "${{ env.MODE }}"
          PROMPT_FILE: "${{ env.PROMPT_FILE }}"
        run: |
          node tools/run_codex.js

      - name: "Show diff summary"
        shell: "bash"
        run: |
          set -euo pipefail
          echo "---- git status ----"
          git status --porcelain=v1 || true
          echo
          echo "---- git diff --stat ----"
          git diff --stat || true

      - name: "Create Pull Request"
        if: ${{ !cancelled() }}
        uses: "peter-evans/create-pull-request@v6"
        with:
          commit-message: "chore(ai): apply codegen (mode=${{ inputs.mode }})"
          title: "AI: apply Codex changes (mode=${{ inputs.mode }})"
          body: "Automated code generation based on /spec. Prompt: ${{ env.PROMPT_FILE }}"
          branch: "${{ env.CODEx_BRANCH }}"
          delete-branch: true
