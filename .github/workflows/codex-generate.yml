name: "Codex Generate (spec-driven, node-run, no-chmod, safe)"

on:
  workflow_call:
    inputs:
      mode:
        description: "実行モード: full（全生成）/ incremental（差分）"
        required: false
        default: "full"
        type: string
      model:
        description: "OpenAI モデル名（未指定なら既定）"
        required: false
        default: ""
        type: string
    secrets:
      OPENAI_API_KEY:
        required: true
  workflow_dispatch:
    inputs:
      mode:
        description: "実行モード: full（全生成）/ incremental（差分）"
        required: false
        default: "full"
        type: string
      model:
        description: "OpenAI モデル名（未指定なら既定）"
        required: false
        default: ""
        type: string

permissions:
  contents: write
  pull-requests: write

jobs:
  generate:
    runs-on: "ubuntu-latest"

    env:
      SPEC_ROOT: "spec"
      SPEC_DIRS: "foundation env-profiles features tests"
      PROMPT_FILE: "ai/prompt.md"
      MODE: "${{ inputs.mode }}"
      MODEL_DEFAULT: "${{ inputs.model || 'gpt-4o-mini' }}"
      OPENAI_MODEL: "${{ inputs.model }}"
      CODEX_BRANCH: "ai/codex/batch-${{ github.run_id }}"

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v4"

      # ---- Node をシンプルにセットアップ（キャッシュなし＝配列事故を回避）----
      - name: "Setup Node (no cache)"
        uses: "actions/setup-node@v4"
        with:
          node-version: "20"

      - name: "Preflight: API key"
        shell: "bash"
        run: |
          set -eu
          [ -n "${{ secrets.OPENAI_API_KEY }}" ] || { echo "::error::OPENAI_API_KEY is not set"; exit 1; }

      - name: "Compose prompt from spec (no-heredoc)"
        shell: "bash"
        run: |
          set -eu
          mkdir -p "ai"
          : > "${PROMPT_FILE}"
          for d in ${SPEC_DIRS}; do
            [ -d "${SPEC_ROOT}/${d}" ] || continue
            echo "## ${d}" >> "${PROMPT_FILE}"
            find "${SPEC_ROOT}/${d}" -type f \( -name "*.md" -o -name "*.txt" -o -name "*.yaml" -o -name "*.yml" -o -name "*.json" \) \
              | LC_ALL=C sort \
              | while read -r f; do
                  printf "\n\n# file: %s\n\n" "${f}" >> "${PROMPT_FILE}"
                  cat "${f}" >> "${PROMPT_FILE}"
                done
          done
          echo "::notice::Prompt composed at ${PROMPT_FILE}"

      - name: "Verify runner script"
        shell: "bash"
        run: |
          set -eu
          [ -f "tools/run_codex.js" ] || { echo "::error::tools/run_codex.js is missing. Commit the script."; exit 1; }

      - name: "Run Codex (node, no chmod)"
        env:
          OPENAI_API_KEY: "${{ secrets.OPENAI_API_KEY }}"
          OPENAI_MODEL: "${{ env.OPENAI_MODEL }}"
          MODEL_DEFAULT: "${{ env.MODEL_DEFAULT }}"
          MODE: "${{ env.MODE }}"
          PROMPT_FILE: "${{ env.PROMPT_FILE }}"
        run: |
          node "tools/run_codex.js"

      - name: "Show diff summary"
        shell: "bash"
        run: |
          set -euo pipefail
          git status --porcelain=v1 || true
          echo
          git diff --stat || true

      - name: "Create Pull Request"
        if: "${{ !cancelled() }}"
        uses: "peter-evans/create-pull-request@v6"
        with:
          commit-message: "chore(ai): apply codegen (mode=${{ inputs.mode }})"
          title: "AI: apply Codex changes (mode=${{ inputs.mode }})"
          body: "Automated code generation based on /spec. Prompt: ${{ env.PROMPT_FILE }}"
          branch: "${{ env.CODEX_BRANCH }}"
          delete-branch: true
