name: "Codex Generate (spec-driven, node-run)"

on:
  workflow_dispatch:
    inputs:
      mode:
        description: "実行モード: full / incremental"
        required: false
        default: "full"
        type: string
      model:
        description: "OpenAI モデル名（任意）"
        required: false
        default: ""
        type: string
  workflow_call:
    inputs:
      mode:
        required: false
        type: string
        default: "full"
      model:
        required: false
        type: string
        default: ""
    secrets:
      OPENAI_API_KEY:
        required: true

permissions:
  contents: "write"
  pull-requests: "write"

jobs:
  generate:
    runs-on: "ubuntu-latest"
    env:
      SPEC_ROOT: "spec"
      SPEC_DIRS: "foundation env-profiles features tests"
      PROMPT_FILE: "ai/prompt.md"
      OPENAI_DEFAULT: "gpt-4o-mini"
      OPENAI_MODEL: "${{ inputs.model || '' }}"
      MODE: "${{ inputs.mode || 'full' }}"
      CODEX_BRANCH: "ai/codex/batch-${{ github.run_id }}"

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v4"

      # Node のキャッシュはロックファイルがある時のみ
      - name: "Setup Node (cache if lock exists)"
        if: "${{ hashFiles('**/package-lock.json', '**/npm-shrinkwrap.json', '**/yarn.lock') != '' }}"
        uses: "actions/setup-node@v4"
        with:
          node-version: "20"
          cache: "npm"

      - name: "Setup Node (no cache)"
        if: "${{ hashFiles('**/package-lock.json', '**/npm-shrinkwrap.json', '**/yarn.lock') == '' }}"
        uses: "actions/setup-node@v4"
        with:
          node-version: "20"

      - name: "Preflight: API key"
        shell: "bash"
        run: |
          set -euo pipefail
          if [ -z "${{ secrets.OPENAI_API_KEY }}" ]; then
            echo "::error::OPENAI_API_KEY is not set"; exit 1
          fi

      - name: "Compose prompt from spec (no-heredoc)"
        shell: "bash"
        run: |
          set -euo pipefail
          mkdir -p ai
          : > "$PROMPT_FILE"
          # 1) 固定ヘッダ（厳格ルールを先頭に）
          printf "%s\n" "OUTPUT ONLY UNIFIED DIFF. NO PROSE. NO MARKDOWN. NO FENCES." >> "$PROMPT_FILE"
          printf "%s\n" "MODE=${MODE}" >> "$PROMPT_FILE"
          printf "%s\n" "" >> "$PROMPT_FILE"
          # 2) spec をグループ順に結合
          for g in foundation env-profiles features tests; do
            if [ -d "${SPEC_ROOT}/${g}" ]; then
              while IFS= read -r -d '' f; do
                echo "--- FILE: ${f#${SPEC_ROOT}/} ---" >> "$PROMPT_FILE"
                cat "$f" >> "$PROMPT_FILE"
                echo "" >> "$PROMPT_FILE"
              done < <(find "${SPEC_ROOT}/${g}" -type f \( -name "*.md" -o -name "*.txt" -o -name "*.yml" -o -name "*.yaml" -o -name "*.json" \) -print0 | sort -z)
            fi
          done

      - name: "Run Codex (node, no chmod)"
        shell: "bash"
        env:
          OPENAI_API_KEY: "${{ secrets.OPENAI_API_KEY }}"
        run: |
          set -euo pipefail
          node --version
          if [ ! -f "tools/run_codex.js" ]; then
            echo "::error::tools/run_codex.js not found. Commit it to the repo."; exit 1
          fi
          node tools/run_codex.js

      - name: "Normalize & verify patch"
        shell: "bash"
        run: |
          set -euo pipefail
          python3 - << 'PY'
import sys, re, pathlib
p = pathlib.Path("ai/patch.diff")
if not p.exists():
    sys.exit("patch not found")
txt = p.read_text(encoding="utf-8").replace("\r","")
# 末尾空白除去
txt = re.sub(r"[ \t]+(\n)", r"\1", txt)
p.write_text(txt if txt.endswith("\n") else txt+"\n", encoding="utf-8")
if not re.search(r"^diff --git ", txt, re.M):
    sys.exit("not a unified diff")
print("patch verified")
PY

      - name: "Apply patch"
        shell: "bash"
        run: |
          set -euo pipefail
          git config user.name "ci-bot"
          git config user.email "ci-bot@example.invalid"
          git checkout -B "$CODEX_BRANCH"
          git reset --hard
          git clean -fdx
          git apply -p0 --index ai/patch.diff
          git status --porcelain=v1
          if [ -z "$(git status --porcelain=v1)" ]; then
            echo "no changes to commit (unexpected)"; exit 1
          fi
          git commit -m "ci: apply codex patch"
          git push -u origin "$CODEX_BRANCH"

      - name: "Create Pull Request"
        uses: "peter-evans/create-pull-request@v6"
        with:
          token: "${{ secrets.GITHUB_TOKEN }}"
          commit-message: "ci: apply codex patch"
          title: "Codex: apply changes"
          body: "Automated patch from spec."
          branch: "${{ env.CODEX_BRANCH }}"
          base: "main"

      - name: "Upload raw & patch (debug)"
        if: "always()"
        uses: "actions/upload-artifact@v4"
        with:
          name: "codex-artifacts"
          path: |
            ai/_raw.txt
            ai/patch.diff
            ${PROMPT_FILE}
