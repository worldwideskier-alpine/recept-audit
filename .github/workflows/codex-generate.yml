# .github/workflows/codex-generate.yml
name: "Codex Generate (reusable)"

on:
  workflow_call:
    inputs:
      mode:
        description: "full:全再生成 / incremental:差分"
        required: false
        default: "full"
        type: string
      model:
        description: "OpenAI model（未指定可）"
        required: false
        default: ""
        type: string
    secrets:
      OPENAI_API_KEY:
        required: true

permissions:
  contents: write
  pull-requests: write

env:
  # 仕様書一式（生成/検査/環境/機能）
  SPEC_FILES: |
    spec/generation.txt
    spec/testing.txt
    spec/environment.txt
    spec/functional.txt

  # 事前に必ず用意するディレクトリ（空でも .gitkeep で載せる）
  SCAFFOLD_DIRS: |
    src
    src/support
    src/config
    src/routes
    src/http
    tools
    storage/logs
    storage/tmp
    tests

  # コード編集を許可するパス（gate 用）
  ALLOWED_GLOBS: |
    src/**
    tests/**
    tools/**
    storage/**
    logs/**
    app.php
    env-lite.php
    health-lite.php
    .htaccess
    ai/CHANGELOG_AI.md

jobs:
  codex:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Preflight – check OPENAI_API_KEY
        shell: bash
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          set -euo pipefail
          if [ -z "${OPENAI_API_KEY:-}" ]; then
            echo "::error::OPENAI_API_KEY is missing"
            exit 1
          fi

      - name: Scaffold required dirs with .gitkeep
        shell: bash
        run: |
          set -euo pipefail
          while IFS= read -r d; do
            [ -z "$d" ] && continue
            mkdir -p "$d"
            # ディレクトリが空の場合でも Git に載るよう .gitkeep を置く
            if [ -z "$(ls -A "$d" 2>/dev/null || true)" ]; then
              touch "$d/.gitkeep"
            fi
          done <<< "${SCAFFOLD_DIRS}"

      # === ここでモデルに生成を依頼（従来どおり） ===
      - name: Run Codex (workspace-write)
        id: codex_exec
        uses: openai/codex-action@main
        continue-on-error: false
        with:
          openai-api-key: ${{ secrets.OPENAI_API_KEY }}
          prompt-file: ai/prompt.md
          # dispatcher 側の inputs をそのまま渡す
          model: ${{ inputs.model }}
          sandbox: workspace-write
        env:
          SPEC_FILES: ${{ env.SPEC_FILES }}

      # 生成結果の PHP の require/require_once/include を静的チェック
      - name: Validate PHP require targets exist
        shell: bash
        run: |
          set -euo pipefail
          MISSING=()

          # チェック対象 PHP
          mapfile -t PHP_FILES < <(git ls-files -- "*.php" || true)
          # ルート直下の app.php なども拾う
          for f in "${PHP_FILES[@]}"; do
            # require/require_once/include の相対パスを抽出
            while IFS= read -r line; do
              req_path=$(echo "$line" | sed -E 's/.*require(_once)?\s*\(?[\"\x27]([^\"\x27]+)[\"\x27]\)?.*/\2/')
              # 絶対パスは対象外（基本使わない想定）
              case "$req_path" in
                /*) continue ;;
              esac
              # 呼び出し元からの相対解決
              base_dir=$(dirname "$f")
              target="$base_dir/$req_path"
              # ../ 正規化
              target=$(python3 - << 'PY'
import os,sys
print(os.path.normpath(sys.argv[1]))
PY
"$target")
              if [ ! -f "$target" ]; then
                MISSING+=("$f => $req_path -> $target")
              fi
            done < <(grep -nE 'require(_once)?|include' "$f" || true)
          done

          if [ ${#MISSING[@]} -gt 0 ]; then
            echo "::group::Missing require targets"
            printf '%s\n' "${MISSING[@]}"
            echo "::endgroup::"
            echo "::error::PHP require/include target files missing. See list above."
            exit 1
          fi

      # 許可パス以外の変更をガード
      - name: Gate diffs to allowed paths
        shell: bash
        run: |
          set -euo pipefail
          ALLOWED=()
          while IFS= read -r g; do [ -z "$g" ] || ALLOWED+=("$g"); done <<< "${ALLOWED_GLOBS}"

          # 変更のあるファイルを取得
          git add -A
          mapfile -t CHANGED < <(git status --porcelain | awk '{print $2}')
          reject=0
          for f in "${CHANGED[@]}"; do
            ok=false
            for g in "${ALLOWED[@]}"; do
              if [[ "$f" == $g ]]; then ok=true; break; fi
            done
            if [ "$ok" = false ]; then
              echo "::error::disallowed change: $f"
              reject=1
            fi
          done
          if [ $reject -eq 1 ]; then
            echo "Allowed patterns were:"; printf ' - %s\n' "${ALLOWED[@]}"
            exit 1
          fi

      - name: Show diff summary
        shell: bash
        run: |
          git status
          git diff --stat || true

      - name: Create PR
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          title: "AI: apply Codex changes"
          body: |
            Automated changes by Codex.
            Mode: `${{ inputs.mode || 'full' }}`
          branch: ai/codex/batch-${{ github.run_id }}
          base: main
          signoff: true
          commit-message: "chore(ai): apply Codex changes"

