name: "Codex Generate (spec-driven or protect-only)"

on:
  workflow_call:
    inputs:
      mode:
        description: "実行モード: full(完全再生成) / incremental(差分)"
        type: "string"
        default: "full"
        required: false
      model:
        description: "OpenAI モデル名（未指定は既定）"
        type: "string"
        default: ""
        required: false
      allow_strategy:
        description: "allowlist の作り方: functional(既定) / protect"
        type: "string"
        default: "functional"
        required: false
    secrets:
      OPENAI_API_KEY:
        required: true
      GH_PAT_WORKFLOWS:
        required: false

permissions:
  contents: "write"
  pull-requests: "write"

env:
  SPEC_FILES: "spec/generation.txt spec/testing.txt spec/environment.txt spec/functional.txt"
  FUNCTIONAL_SPEC: "spec/functional.txt"
  ALLOWLIST_FILE: "ai/allowlist.txt"
  PROTECT_GLOBS: ".github/** spec/** ai/** .git/**"

jobs:
  generate:
    runs-on: "ubuntu-latest"
    steps:
      - name: "Checkout"
        uses: "actions/checkout@v4"
        with:
          fetch-depth: 0

      - name: "Setup Node"
        uses: "actions/setup-node@v4"
        with:
          node-version: "20"
          cache: "none"

      - name: "Preflight - API key"
        shell: "bash"
        run: |
          if [ -z "${{ secrets.OPENAI_API_KEY }}" ]; then
            echo "::error::OPENAI_API_KEY is missing"
            exit 1
          fi

      - name: "Build allowlist (functional or protect)"
        id: "allow"
        shell: "bash"
        run: |
          set -euo pipefail
          mkdir -p ai
          : > "${ALLOWLIST_FILE}"

          if [ "${{ inputs.allow_strategy }}" = "protect" ]; then
            printf "%s\n" "** (protected: ${PROTECT_GLOBS})" > "${ALLOWLIST_FILE}"
          else
            f="${FUNCTIONAL_SPEC}"
            if [ -f "$f" ]; then
              awk 'BEGIN{inb=0} /^```paths[[:space:]]*$/{inb=1;next} /^```[[:space:]]*$/{if(inb){inb=0;next}} {if(inb)print}' "$f" >> "${ALLOWLIST_FILE}" || true
              sed -nE 's/^[[:space:]]*(- )?(path|file|dir|directory|パス|ファイル|ディレクトリ)[[:space:]]*[:：][[:space:]]*//p' "$f" >> "${ALLOWLIST_FILE}" || true
              grep -Eo '([A-Za-z0-9_./-]+\.php)\b' "$f" | sed 's|^\./||' > ai/_functional_files.txt || true
            fi

            if [ -s ai/_functional_files.txt ]; then
              while IFS= read -r p; do
                d="$(dirname "$p")"
                [ "$d" = "." ] && continue
                printf "%s\n" "${d}/**" >> "${ALLOWLIST_FILE}"
              done < ai/_functional_files.txt
            fi

            for ftop in "app.php" "env-lite.php" "health-lite.php" ".htaccess"; do
              printf "%s\n" "$ftop" >> "${ALLOWLIST_FILE}"
            done

            sed -e 's/#.*$//' -e 's/^[[:space:]]*//' -e '/^$/d' "${ALLOWLIST_FILE}" | sort -u > "${ALLOWLIST_FILE}.tmp"
            mv "${ALLOWLIST_FILE}.tmp" "${ALLOWLIST_FILE}"

            if [ ! -s "${ALLOWLIST_FILE}" ]; then
              printf "%s\n" "src/**"   >> "${ALLOWLIST_FILE}"
              printf "%s\n" "tests/**" >> "${ALLOWLIST_FILE}"
            fi
          fi

          echo "----- ALLOWLIST -----"
          cat "${ALLOWLIST_FILE}"

      - name: "Clean (full mode)"
        if: ${{ inputs.mode == 'full' }}
        shell: "bash"
        run: |
          set -euo pipefail
          if [ "${{ inputs.allow_strategy }}" = "protect" ]; then
            git ls-files | grep -Ev '^(\.github/|spec/|ai/|\.git/)' | xargs -r git rm -f
            find . -mindepth 1 -maxdepth 1 \
              -not -path "./.github" -not -path "./spec" -not -path "./ai" -not -path "./.git" \
              -exec rm -rf {} +
          else
            while IFS= read -r p; do
              [ -z "$p" ] && continue
              case "$p" in ai/**|spec/**|.github/**) continue ;; esac
              git rm -r -f --ignore-unmatch -- "$p" 2>/dev/null || true
              rm -rf -- "$p" || true
            done < "${ALLOWLIST_FILE}"
          fi

      - name: "Build prompt from specs"
        shell: "bash"
        run: |
          set -euo pipefail
          mkdir -p ai
          : > ai/prompt.md
          printf "%s\n" "# Codex generation prompt" >> ai/prompt.md
          printf "%s\n" "" >> ai/prompt.md
          printf "%s\n" "- MODE: ${{ inputs.mode }}" >> ai/prompt.md
          printf "%s\n" "- ALLOW_STRATEGY: ${{ inputs.allow_strategy }}" >> ai/prompt.md
          for f in $SPEC_FILES; do
            if [ -f "$f" ]; then
              printf "%s\n" "" >> ai/prompt.md
              printf "%s\n" "---" >> ai/prompt.md
              printf "%s\n" "# $(basename "$f")" >> ai/prompt.md
              cat "$f" >> ai/prompt.md
            fi
          done
          printf "%s\n" "" >> ai/prompt.md
          printf "%s\n" "---" >> ai/prompt.md
          printf "%s\n" "# Authoring rules" >> ai/prompt.md
          printf "%s\n" "- 仕様書から導いた許可パスの範囲で、必要なディレクトリ／ファイルをすべて新規作成・更新する。" >> ai/prompt.md
          printf "%s\n" "- PHP の require / require_once / include の参照先は、実装ファイルを必ず生成する（ダミー不可）。" >> ai/prompt.md
          printf "%s\n" "- \"spec/**\", \".github/**\", \"ai/**\" は変更しない（ai/** の補助スクリプト追記は可）。" >> ai/prompt.md
          printf "%s\n" "- ルートに app.php / env-lite.php / health-lite.php / .htaccess が必要なら生成・更新する。" >> ai/prompt.md
          printf "%s\n" "- UTF-8 LF。Composer 不要。安全に上書きできる最小差分で。" >> ai/prompt.md

      - name: "Run Codex"
        uses: "openai/codex-action@main"
        with:
          openai-api-key: "${{ secrets.OPENAI_API_KEY }}"
          prompt-file: "ai/prompt.md"
          model: "${{ inputs.model || '' }}"
          sandbox: "workspace-write"

      - name: "Show diff summary"
        shell: "bash"
        run: |
          echo "=== git status ==="
          git status --porcelain=v1 || true
          echo "=== diff (stat) ==="
          git diff --stat || true

      - name: "Configure git author"
        shell: "bash"
        run: |
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git config user.name  "github-actions[bot]"

      - name: "Stage changes (functional allowlist)"
        if: ${{ inputs.allow_strategy != 'protect' }}
        shell: "bash"
        run: |
          set -euo pipefail
          while IFS= read -r p; do
            [ -z "$p" ] && continue
            git add -- "$p" 2>/dev/null || true
          done < "${ALLOWLIST_FILE}"
          git reset -q spec || true
          git reset -q .github || true
          git reset -q ai/prompt.md || true

      - name: "Stage changes (protect only)"
        if: ${{ inputs.allow_strategy == 'protect' }}
        shell: "bash"
        run: |
          set -euo pipefail
          git add -A
          for g in ${PROTECT_GLOBS}; do
            git reset -q $g || true
          done
          git reset -q ai/prompt.md || true

      - name: "Create Pull Request"
        uses: "peter-evans/create-pull-request@v7"
        with:
          token: "${{ secrets.GH_PAT_WORKFLOWS || github.token }}"
          branch: "ai/codex/batch-${{ github.run_id }}"
          title: "AI: ${{ inputs.mode }} generation (strategy=${{ inputs.allow_strategy }})"
          body: |
            Automated generation by Codex.
            - mode: `${{ inputs.mode }}`
            - allow_strategy: `${{ inputs.allow_strategy }}`
            - model: `${{ inputs.model }}`
          signoff: true
