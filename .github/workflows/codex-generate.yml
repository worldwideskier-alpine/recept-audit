name: "Codex Generate (spec-driven)"

on:
  workflow_call:
    inputs:
      mode:
        description: "実行モード: full（全生成） / incremental（差分）"
        type: string
        required: false
        default: "full"
      model:
        description: "OpenAI モデル名（任意）"
        type: string
        required: false
        default: ""
    secrets:
      OPENAI_API_KEY:
        required: true

  workflow_dispatch:
    inputs:
      mode:
        description: "実行モード: full（全生成） / incremental（差分）"
        type: string
        required: false
        default: "full"
      model:
        description: "OpenAI モデル名（任意）"
        type: string
        required: false
        default: ""

permissions:
  contents: write
  pull-requests: write

jobs:
  generate:
    name: "generate"
    runs-on: "ubuntu-latest"
    env:
      OPENAI_API_KEY: "${{ secrets.OPENAI_API_KEY }}"
      MODE: "${{ inputs.mode }}"
      MODEL: "${{ inputs.model }}"
      # 生成物として PR に載せるパス（必要に応じて調整）
      GENERATED_PATHS: |
        src/**
        tests/**
        tools/**
        public/**
        storage/**
        logs/**
        app.php
        env-lite.php
        health-lite.php
        .htaccess

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v4"

      # full だけ既存生成物の掃除（空ディレクトリは残して OK）
      - name: "Clean generated targets (full mode)"
        if: "${{ env.MODE == 'full' }}"
        shell: "bash"
        run: |
          set -euo pipefail
          to_clean=( "src" "tests" "tools" "public" "storage" "logs" "app.php" "env-lite.php" "health-lite.php" ".htaccess" )
          for p in "${to_clean[@]}"; do
            if [ -e "$p" ] || [ -L "$p" ]; then
              git rm -r --ignore-unmatch -f "$p" || true
              rm -rf "$p"
            fi
          done

      # 仕様の自動結合：一時領域（レポジトリ外）に作成
      - name: "Compose composite prompt from spec/"
        id: "prompt"
        shell: "bash"
        run: |
          set -euo pipefail
          PROMPT="${RUNNER_TEMP}/prompt.md"
          : > "$PROMPT"

          collect() {
            local group="$1"
            find "spec/${group}" -type f \
              \( -name "*.md" -o -name "*.txt" -o -name "*.yaml" -o -name "*.yml" -o -name "*.json" \) \
              -print 2>/dev/null | LC_ALL=C sort || true
          }

          add() {
            local f="$1"
            printf "\n\n<!-- file: %s -->\n\n" "$f" >> "$PROMPT"
            cat "$f" >> "$PROMPT"
            printf "\n" >> "$PROMPT"
          }

          for g in foundation env-profiles features tests; do
            while IFS= read -r f; do
              [ -n "$f" ] && [ -f "$f" ] && add "$f"
            done < <(collect "$g")
          done

          if [ ! -s "$PROMPT" ]; then
            echo "::warning::No spec files detected under spec/{foundation,env-profiles,features,tests}"
          fi

          echo "PROMPT=$PROMPT" >> "$GITHUB_OUTPUT"

      # Codex 実行（プロンプトは一時領域のファイル）
      - name: "Run Codex"
        uses: "openai/codex-action@main"
        with:
          openai-api-key: "${{ env.OPENAI_API_KEY }}"
          prompt-file: "${{ steps.prompt.outputs.PROMPT }}"
          model: "${{ env.MODEL }}"
          sandbox: "workspace-write"

      # 保護パスに変更が混入していないかをブロック
      - name: "Guard: reject edits under protected paths"
        shell: "bash"
        run: |
          set -euo pipefail
          if [ -z "$(git status --porcelain)" ]; then
            exit 0
          fi

          PROTECTS=( ".github/**" "spec/**" "evidence/**" "dist/**" )
          reject=0
          while IFS= read -r path; do
            for pat in "${PROTECTS[@]}"; do
              [[ "$path" == $pat ]] && echo "::error::blocked change: $path" && reject=1
            done
          done < <(git status --porcelain | awk '{print $2}')

          [ "$reject" -eq 0 ] || { echo "::error::Protected paths were modified."; exit 1; }

      # 生成物パス以外の変更は落とす（ai/ などがあっても PR に載らない）
      - name: "Restrict staged changes to generated paths"
        shell: "bash"
        run: |
          set -euo pipefail
          git add -A
          # いったん全部外す
          git reset
          # 許可パスだけ追加
          while IFS= read -r pattern; do
            [ -z "$pattern" ] && continue
            git add --force -- "$pattern" 2>/dev/null || true
          done <<< "${GENERATED_PATHS}"

      - name: "Show diff summary"
        shell: "bash"
        run: |
          git status --porcelain=v1 || true
          git diff --cached --stat || true

      - name: "Exit early if no generated changes"
        shell: "bash"
        run: |
          if [ -z "$(git diff --cached --name-only)" ]; then
            echo "No generated changes to commit."
            exit 0
          fi

      - name: "Configure git author"
        shell: "bash"
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name  "github-actions[bot]"

      - name: "Create PR (generated only)"
        uses: "peter-evans/create-pull-request@v7"
        with:
          token: "${{ secrets.GITHUB_TOKEN }}"
          branch: "ai/codex/batch-${{ github.run_id }}"
          base: "main"
          title: "AI: apply Codex changes"
          body: "Automated changes generated from spec with mode `${{ env.MODE }}`."
          commit-message: "chore(ai): apply Codex changes (mode=${{ env.MODE }})"
          add-paths: |
            ${{
              env.GENERATED_PATHS
            }}
          delete-branch: true
          signoff: false
          labels: "ai, codex, automated"
