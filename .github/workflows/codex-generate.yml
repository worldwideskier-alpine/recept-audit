name: "Codex Generate (spec-driven)"

on:
  workflow_call:
    inputs:
      mode:
        description: "実行モード: full（全生成） / incremental（差分）"
        required: false
        default: "full"
        type: string
      model:
        description: "OpenAI モデル名（任意）"
        required: false
        default: ""
        type: string
    secrets:
      OPENAI_API_KEY:
        description: "OpenAI API Key"
        required: true
  workflow_dispatch:
    inputs:
      mode:
        description: "実行モード: full（全生成） / incremental（差分）"
        required: false
        default: "full"
        type: string
      model:
        description: "OpenAI モデル名（任意）"
        required: false
        default: ""
        type: string

permissions:
  contents: write
  pull-requests: write

jobs:
  generate:
    runs-on: "ubuntu-latest"

    env:
      # 仕様ディレクトリ（foundation / env-profiles / features / tests）
      SPEC_DIRS: "spec/foundation spec/env-profiles spec/features spec/tests"
      PROMPT_FILE: "ai/prompt.md"
      PATCH_FILE: "ai/patch.diff"
      NORM_PATCH: "ai/patch.norm.diff"
      MODEL_DEFAULT: "gpt-4.1-mini" # 任意。inputs.model が空ならこれを使う

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v4"

      - name: "Setup Node"
        uses: "actions/setup-node@v4"
        with:
          node-version: "20"

      - name: "Preflight: API key"
        shell: "bash"
        run: |
          set -euo pipefail
          mkdir -p ai tools
          if [ -z "${{ secrets.OPENAI_API_KEY }}" ]; then
            echo "::error::OPENAI_API_KEY is missing."
            exit 1
          fi
          echo "OPENAI_API_KEY present."

      # 仕様をまとめてプロンプト化（heredoc 不使用）
      - name: "Compose prompt from spec (no-heredoc)"
        shell: "bash"
        run: |
          set -euo pipefail

          PROMPT="${PROMPT_FILE}"
          : > "${PROMPT}"

          # ヘッダ
          printf "%s\n" "# Codex generation prompt" >> "${PROMPT}"
          printf "%s\n" "" >> "${PROMPT}"
          printf "%s\n" "## MODE: ${{ inputs.mode }}" >> "${PROMPT}"
          printf "%s\n" "" >> "${PROMPT}"

          # 仕様を順序通りに結合
          for G in ${SPEC_DIRS}; do
            if [ -d "$G" ]; then
              # *.md / *.yml / *.yaml / *.json を昇順で
              while IFS= read -r -d '' f; do
                printf "%s\n" "--- file: ${f}" >> "${PROMPT}"
                cat "${f}" >> "${PROMPT}"
                printf "\n\n" >> "${PROMPT}"
              done < <(find "$G" -type f \( -name "*.md" -o -name "*.yml" -o -name "*.yaml" -o -name "*.json" \) -print0 | sort -z)
            fi
          done

          # 生成ルール（最小限/汎用）
          printf "%s\n" "<!-- authoring-rules -->" >> "${PROMPT}"
          printf "%s\n" "You must output ONLY ONE Git unified diff at repository root." >> "${PROMPT}"
          printf "%s\n" "No prose, no code fences, no preface. Create missing files/dirs." >> "${PROMPT}"
          printf "%s\n" "Never touch .git or .github. Tests under tests/ only." >> "${PROMPT}"
          printf "%s\n" "<!-- /authoring-rules -->" >> "${PROMPT}"

      # Codex 呼び出し：Node ワンファイルを printf で生成 → 実行
      - name: "Prepare codex client (no-heredoc)"
        shell: "bash"
        run: |
          set -euo pipefail
          mkdir -p tools

          JS="tools/run_codex.js"
          : > "${JS}"

          printf "%s\n" "const fs = require('fs');" >> "${JS}"
          printf "%s\n" "const https = require('https');" >> "${JS}"
          printf "%s\n" "const API_KEY = process.env.OPENAI_API_KEY;" >> "${JS}"
          printf "%s\n" "const MODEL = (process.env.INPUT_MODEL && process.env.INPUT_MODEL.trim()) ? process.env.INPUT_MODEL.trim() : process.env.MODEL_DEFAULT;" >> "${JS}"
          printf "%s\n" "const prompt = fs.readFileSync(process.env.PROMPT_FILE, 'utf8');" >> "${JS}"
          printf "%s\n" "const body = JSON.stringify({" >> "${JS}"
          printf "%s\n" "  model: MODEL," >> "${JS}"
          printf "%s\n" "  messages: [" >> "${JS}"
          printf "%s\n" "    {role:'system', content:'You are a careful code-generation agent. Output ONLY ONE Git unified diff (as produced by git diff --no-index --binary --full-index --src-prefix=a/ --dst-prefix=b/). No prose, no code fences, no explanations. Create missing files/dirs. All tests under tests/. Never touch .git or .github.'}," >> "${JS}"
          printf "%s\n" "    {role:'user', content: prompt}" >> "${JS}"
          printf "%s\n" "  ]," >> "${JS}"
          printf "%s\n" "  temperature: 0.2," >> "${JS}"
          printf "%s\n" "  max_tokens: 8000" >> "${JS}"
          printf "%s\n" "});" >> "${JS}"
          printf "%s\n" "const req = https.request({" >> "${JS}"
          printf "%s\n" "  method: 'POST'," >> "${JS}"
          printf "%s\n" "  hostname: 'api.openai.com'," >> "${JS}"
          printf "%s\n" "  path: '/v1/chat/completions'," >> "${JS}"
          printf "%s\n" "  headers: {" >> "${JS}"
          printf "%s\n" "    'Content-Type': 'application/json'," >> "${JS}"
          printf "%s\n" "    'Authorization': 'Bearer ' + API_KEY" >> "${JS}"
          printf "%s\n" "  }" >> "${JS}"
          printf "%s\n" "}, (res) => {" >> "${JS}"
          printf "%s\n" "  let data='';" >> "${JS}"
          printf "%s\n" "  res.on('data', (c)=> data+=c);" >> "${JS}"
          printf "%s\n" "  res.on('end', ()=> {" >> "${JS}"
          printf "%s\n" "    if (res.statusCode!>=200 && res.statusCode<300) {}" >> "${JS}"
          printf "%s\n" "    try {" >> "${JS}"
          printf "%s\n" "      const j = JSON.parse(data);" >> "${JS}"
          printf "%s\n" "      const txt = (j.choices && j.choices[0] && j.choices[0].message && j.choices[0].message.content) ? j.choices[0].message.content : '';" >> "${JS}"
          printf "%s\n" "      fs.mkdirSync('ai', {recursive:true});" >> "${JS}"
          printf "%s\n" "      fs.writeFileSync(process.env.PATCH_FILE, txt, 'utf8');" >> "${JS}"
          printf "%s\n" "      console.log('Patch saved to', process.env.PATCH_FILE);" >> "${JS}"
          printf "%s\n" "    } catch(e) {" >> "${JS}"
          printf "%s\n" "      console.error('OpenAI response parse error:', e);" >> "${JS}"
          printf "%s\n" "      console.error(data);" >> "${JS}"
          printf "%s\n" "      process.exit(1);" >> "${JS}"
          printf "%s\n" "    }" >> "${JS}"
          printf "%s\n" "  });" >> "${JS}"
          printf "%s\n" "});" >> "${JS}"
          printf "%s\n" "req.on('error', (e)=>{ console.error(e); process.exit(1); });" >> "${JS}"
          printf "%s\n" "req.write(body);" >> "${JS}"
          printf "%s\n" "req.end();" >> "${JS}"

      - name: "Run Codex (call OpenAI)"
        shell: "bash"
        env:
          OPENAI_API_KEY: "${{ secrets.OPENAI_API_KEY }}"
          INPUT_MODEL: "${{ inputs.model }}"
        run: |
          set -euo pipefail
          node tools/run_codex.js

      # ここが今回の肝：パッチ正規化＋複数戦略で適用
      - name: "Normalize & apply patch (multi-try)"
        shell: "bash"
        run: |
          set -euo pipefail

          SRC="${PATCH_FILE}"
          NORM="${NORM_PATCH}"

          if [ ! -s "${SRC}" ]; then
            echo "::error::${SRC} is empty."
            exit 1
          fi

          # 1) CRLF, コードフェンス、前置き説明の除去（diff --git から始める）
          awk '{
            sub(/\r$/,"");
            if ($0 ~ /^```/) next;
            if (seen) { print; next }
            if ($0 ~ /^diff --git /){ print; seen=1; next }
          }' "${SRC}" > "${NORM}" || true

          # diff --git が無ければ ---/+++ からも試行
          if ! grep -q '^diff --git ' "${NORM}" 2>/dev/null; then
            awk '{
              sub(/\r$/,"");
              if ($0 ~ /^```/) next;
              if (seen) { print; next }
              if ($0 ~ /^(\-\-\- |\+\+\+ )/){ print; seen=1; next }
            }' "${SRC}" > "${NORM}" || true
          fi

          # 末尾に改行追加
          printf "\n" >> "${NORM}"

          echo "---- normalized patch head ----"
          sed -n '1,120p' "${NORM}" || true
          echo "--------------------------------"

          try() {
            echo "::group::git apply $*"
            if git apply "$@" "${NORM}"; then
              echo "git apply $* : OK"
              echo "::endgroup::"
              return 0
            else
              s=$?
              echo "git apply $* : NG (exit ${s})"
              echo "::endgroup::"
              return ${s}
            fi
          }

          # 2) 順に戦略を変えて適用
          try --index --check \
          || try --index --whitespace=fix \
          || try --index --unidiff-zero \
          || try --index --reject \
          || {
               echo "::error::Patch still cannot be applied. Showing diagnostics…"
               wc -l "${NORM}" || true
               sed -n '1,200p' "${NORM}" || true
               exit 1
             }

      - name: "Show diff summary"
        shell: "bash"
        run: |
          set -euo pipefail
          git status --porcelain=1 || true
          git diff --stat || true

      - name: "Create PR"
        uses: "peter-evans/create-pull-request@v6"
        with:
          token: "${{ github.token }}"
          branch: "ai/codex/batch-${{ github.run_id }}"
          title: "AI: apply Codex changes (mode=${{ inputs.mode }})"
          commit-message: "ai: update from spec (mode=${{ inputs.mode }})"
          body: "Automated update from spec. Model: `${{ inputs.model || env.MODEL_DEFAULT }}`"
          signoff: false
          draft: false
          delete-branch: true
